package components

import (
	"fmt"
	"github.com/knackwurstking/pgpress/env"
	"github.com/knackwurstking/pgpress/models"
	"github.com/knackwurstking/pgpress/utils"
)

type ToolAnchorOptions struct {
	EnableStatusBadge  bool
	EnableBindingBadge bool
	EnableTotalCycles  bool
}

templ ToolAnchor(tool *models.ResolvedTool, options *ToolAnchorOptions) {
	if options == nil {
		{{ options = &ToolAnchorOptions{} }}
	}
	<a
		role="button"
		class="outline contrast flex justify-between items-center p"
		href={ templ.URL(fmt.Sprintf("%s/tools/tool/%d", env.ServerPathPrefix, tool.ID)) }
	>
		<div class="flex gap justify-between w-full">
			<div class="flex flex-col gap w-full">
				<span class="text-semibold">
					{ tool.String() }
				</span>
				<div class="flex gap justify-between items-center w-full">
					@PositionBadge(tool.Position, "primary text-bold")
					if options.EnableStatusBadge {
						@ToolStatusBadge(tool.Tool)
					}
					if options.EnableTotalCycles {
						<span
							class="total-cycles-container flex justify-end items-center w-full pr text-sm"
							hx-get={ utils.HXGetToolTotalCycles(tool.ID, tool.Position, false) }
							hx-trigger="load"
							hx-swap="innerHTML"
							hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
						></span>
					}
				</div>
				if tool.Position == models.PositionTop && tool.IsBound() {
					<div class="text-sm italic info ghost">
						if tool.GetBindingTool() == nil {
							<i>Ooops, there is no binding tool</i>
						} else {
							{{ bindingTool := tool.GetBindingTool() }}
							<i>Kassette: { bindingTool.Code } { bindingTool.Type }</i>
						}
					</div>
				}
			</div>
		</div>
		<i class="bi bi-chevron-right"></i>
	</a>
}
