// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"github.com/knackwurstking/pgpress/env"
	"github.com/knackwurstking/pgpress/models"
	"github.com/knackwurstking/pgpress/utils"
)

// DownloadPDF provides a reusable script function to download PDFs
func DownloadPDF(url templ.SafeURL, defaultFilename, loadingContent, resetContent string) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_DownloadPDF_4965`,
		Function: `function __templ_DownloadPDF_4965(url, defaultFilename, loadingContent, resetContent){async function downloadPDF() {
		const button = event.target.closest('button') || event.target;
		const originalContent = button.innerHTML || button.textContent;

		try {
			// Show loading state
			if (loadingContent) {
				if (button.innerHTML !== button.textContent) {
					button.innerHTML = loadingContent;
				} else {
					button.textContent = loadingContent;
				}
			}
			button.disabled = true;

			// Fetch the PDF
			const response = await fetch(url);
			if (!response.ok) {
				throw new Error('PDF konnte nicht geladen werden');
			}

			// Get the blob and create download
			const blob = await response.blob();
			const downloadUrl = window.URL.createObjectURL(blob);
			const a = document.createElement('a');

			// Extract filename from headers or use default
			const contentDisposition = response.headers.get('Content-Disposition');
			const filenameMatch = contentDisposition?.match(/filename="(.+)"/);
			const filename = filenameMatch?.[1] || defaultFilename;

			// Configure and trigger download
			Object.assign(a, {
				style: { display: 'none' },
				href: downloadUrl,
				download: filename
			});

			document.body.appendChild(a);
			a.click();

			// Cleanup
			window.URL.revokeObjectURL(downloadUrl);
			document.body.removeChild(a);

			// Reset button
			if (button.innerHTML !== button.textContent) {
				button.innerHTML = originalContent;
			} else {
				button.textContent = originalContent;
			}
			button.disabled = false;

		} catch (error) {
			console.error('Download failed:', error);
			alert('Fehler beim Download: ' + error.message);

			// Reset button with fallback content
			const fallbackContent = resetContent || originalContent;
			if (button.innerHTML !== button.textContent) {
				button.innerHTML = fallbackContent;
			} else {
				button.textContent = fallbackContent;
			}
			button.disabled = false;
		}
	}

	downloadPDF();
}`,
		Call:       templ.SafeScript(`__templ_DownloadPDF_4965`, url, defaultFilename, loadingContent, resetContent),
		CallInline: templ.SafeScriptInline(`__templ_DownloadPDF_4965`, url, defaultFilename, loadingContent, resetContent),
	}
}

func DownloadCycleSummaryPDF(press models.PressNumber) templ.ComponentScript {
	return DownloadPDF(
		utils.HXGetPressCycleSummaryPDF(press),
		"cycle_summary.pdf",
		"LÃ¤dt...",
		"Zusammenfassung (PDF)",
	)
}

func DownloadTroubleReportPDF(troubleReportID int64) templ.ComponentScript {
	return DownloadPDF(
		templ.SafeURL(fmt.Sprintf("%s/trouble-reports/share-pdf?id=%d",
			env.ServerPathPrefix, troubleReportID)),
		"trouble_report.pdf",
		`<i class="bi bi-hourglass-split"></i>`,
		`<i class="bi bi-share"></i>`,
	)
}

var _ = templruntime.GeneratedTemplate
