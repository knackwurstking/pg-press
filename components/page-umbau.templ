package components

import (
	"fmt"

	"github.com/knackwurstking/pgpress/env"
	"github.com/knackwurstking/pgpress/models"
)

type PageUmbauProps struct {
	PressNumber models.PressNumber
	User        *models.User
	Tools       []*models.Tool
}

func (pp *PageUmbauProps) GetOptions(position models.Position) []PageUmbauOption {
	var options []PageUmbauOption

	for _, tool := range pp.Tools {
		if tool.Position == position {
			options = append(options, PageUmbauOption{
				ToolID: tool.ID,
				Label:  tool.String(),
				Format: tool.Format.String(),
			})
		}
	}

	return options
}

func (pp *PageUmbauProps) GetSlotsMap() map[models.Position]*models.Tool {
	slots := map[models.Position]*models.Tool{
		models.PositionTop:    nil,
		models.PositionBottom: nil,
	}

	for _, t := range pp.Tools {
		if t.Press != nil && *t.Press == pp.PressNumber {
			slots[t.Position] = t
		}
	}

	return slots
}

type PageUmbauOption struct {
	ToolID int64
	Label  string
	Format string
}

templ PageUmbau(props *PageUmbauProps) {
	@Layout(
		LayoutOptions{
			PageTitle:   fmt.Sprintf("PG Presse | Umbau Presse %d", props.PressNumber),
			AppBarTitle: fmt.Sprintf("Umbau Presse %d", props.PressNumber),
			NavContent:  StandardNavContent(),
		},
	) {
		{{ slots := props.GetSlotsMap() }}
		<main class="container fluid">
			<h2>Werkzeugumbau an Presse { fmt.Sprintf("%d", props.PressNumber) }</h2>
			<form
				hx-post={ fmt.Sprintf("%s/tools/press/%d/umbau", env.ServerPathPrefix, props.PressNumber) }
				hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
				hx-on:htmx:after-request="if(event.detail.successful) history.back()"
			>
				@pageUmbau_cyclesSection()
				<hr/>
				for _, position := range []models.Position{models.PositionTop, models.PositionBottom} {
					{{ currentTool := slots[position] }}
					<section>
						<h3>{ models.PositionBottom.GermanString() }</h3>
						if currentTool != nil {
							<p>Aktuelles Werkzeug: { currentTool.String() }</p>
						} else {
							<p>Aktuelles Werkzeug: -</p>
						}
						<span class="flex flex-col">
							{{
								var id string
								switch position {
								case models.PositionTop:
									id = "top"
								case models.PositionBottom:
									id = "bottom"
								}
							}}
							<label for={ id }>Neues Werkzeug:</label>
							<select
								id={ id }
								name={ id }
								onchange={ pageUmbauOnToolChange(templ.JSExpression("event")) }
							>
								<option value="" selected>{ position.GermanString() } w√§hlen</option>
								for _, o := range props.GetOptions(position) {
									<option value={ o.ToolID } data-format={ o.Format }>{ o.Label }</option>
								}
							</select>
						</span>
					</section>
				}
				<hr/>
				@pageUmbau_formActions(props.User)
			</form>
		</main>
	}
}

templ pageUmbau_cyclesSection() {
	<section>
		<span class="flex flex-col">
			<label for="press-total-cycles">Gesamtzyklen:</label>
			<input
				type="number"
				id="press-total-cycles"
				name="press-total-cycles"
				placeholder="Gesamtzyklen"
				required
			/>
		</span>
	</section>
}

templ pageUmbau_formActions(user *models.User) {
	<footer class="flex justify-end items-center">
		<button
			type="submit"
			disabled?={ !user.IsAdmin() }
		>Umbau speichern</button>
	</footer>
}

script pageUmbauOnToolChange(event templ.JSExpression) {
	var target = event.currentTarget;

	// Get the tool id from the target element
	var toolID = target.value;

	// Get the format from the current selected option
	var format = "";
	var selectedOption = target.children[target.selectedIndex];
	if (selectedOption) {
		format = selectedOption.getAttribute("data-format");
	}

	// Get all the options, besides the first one for each select element (#top, #bottom)
	options = [
		...[...document.querySelectorAll("select#bottom > option")].slice(1),
		...[...document.querySelectorAll("select#top > option")].slice(1),
	]

	// Disable all options that are not compatible with the selected format
	var optionsLoopHandler = function(option) {
		option.disabled = false; // Just resetting

		// Check format (data-format)
		if (!!format && !option.textContent.includes(format)) option.disabled = true;

		// Check tool ID (value)
		if (!!option.value && option.value == toolID) option.disabled = true;
	};

	// Loop through all options
	options.forEach(optionsLoopHandler);
}
