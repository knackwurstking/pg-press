package components

const (
	DialogContentID = "dialog-content"
)

type BaseDialogProps struct {
	ID               string
	Type             string // Type like "POST", "PUT"
	Href             templ.SafeURL
	SubmitButtonText string
	Error            string
	ReloadOnSubmit   bool
}

templ BaseDialog(props BaseDialogProps) {
	{{
		onclose := templ.ComponentScript{
			Call: `this.remove();`,
		}
		if props.ReloadOnSubmit {
			onclose.Call = `this.remove(); location.reload();`
		}
	}}
	<dialog
		id={ props.ID }
		class="fullscreen clean flex flex-col justify-center items-center"
		onclose={ onclose }
		oncancel="event.preventDefault()"
		onclick="if (event.target === this) event.preventDefault()"
	>
		<form
			class="flex flex-col gap p w-full"
			if props.Type == "POST" {
				hx-post={ props.Href }
			}
			if props.Type == "PUT" {
				hx-put={ props.Href }
			}
			hx-target="body"
			hx-swap="beforeend"
			hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
			hx-on:htmx:after-request="if (event.detail.successful) this.closest('dialog').close();"
			enctype="multipart/form-data"
			onclick="event.stopPropagation()"
		>
			if props.Error != "" {
				<div class="card compact destructive">
					<div class="card-body">
						{ props.Error }
					</div>
				</div>
			}
			<div
				name="dialog-content"
				class="flex flex-col gap overflow-y-scroll scroll-smooth no-scrollbar p h-full"
			>
				{ children... }
			</div>
			<footer class="flex gap justify-end">
				<button
					name="close"
					class="secondary flex gap"
					type="button"
					onclick="this.closest('dialog').close()"
				>
					<i class="bi bi-x-circle"></i>
					Abbrechen
				</button>
				<button
					type="submit"
					class="flex gap"
				>
					<i class="bi bi-check-circle"></i>
					{ props.SubmitButtonText }
				</button>
			</footer>
		</form>
		<script defer>
			document.querySelector('#{{ props.ID }}').showModal();
		</script>
	</dialog>
}
