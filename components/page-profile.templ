package components

import (
	"fmt"

	"github.com/knackwurstking/pgpress/env"
	"github.com/knackwurstking/pgpress/models"
	"github.com/knackwurstking/pgpress/utils"
)

templ PageProfile(user *models.User) {
	@Layout(
		LayoutOptions{
			PageTitle:      "PG Presse | Profil",
			AppBarTitle:    "Profil",
			NavContent:     StandardNavContent(),
			AdditionalHead: pageProfileAdditionalHead(),
		},
	) {
		<main class="container fluid" style="max-width: 42rem; margin: 0 auto;">
			@profileHeader(user)
			@cookiesSection()
			@editUserDialog(user)
		</main>
	}
}

templ profileHeader(user *models.User) {
	<div class="profile-header border">
		<div class="flex justify-between items-center mb">
			<h1>{ user.Name }</h1>
			<button
				class="secondary icon"
				onclick='document.querySelector("#edit-user-name-dialog").showModal();'
				title="Benutzername bearbeiten"
			>
				<i class="bi bi-pen"></i>
			</button>
		</div>
		<div class="flex gap flex-wrap justify-between items-center">
			<div class="telegram-id">
				<i class="bi bi-telegram"></i>
				Telegram ID: { user.TelegramID }
			</div>
			<a
				role="button"
				href={ templ.SafeURL(env.ServerPathPrefix + "/logout") }
				class="ghost destructive flex gap"
			>
				<i class="bi bi-box-arrow-right"></i>
				Abmelden
			</a>
		</div>
	</div>
}

templ cookiesSection() {
	<div class="border" style="overflow: hidden; background: var(--ui-color-50);">
		<span
			id="cookies"
			hx-get={ utils.HXGetCookies() }
			hx-trigger="load"
			hx-swap="outerHTML"
			hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
		></span>
	</div>
}

templ editUserDialog(user *models.User) {
	<dialog
		id="edit-user-name-dialog"
		class="profile-dialog border clean"
		oncancel="event.preventDefault()"
	>
		<form action={ templ.URL(fmt.Sprintf("%s/profile", env.ServerPathPrefix)) }>
			<label class="flex flex-col">
				<strong>Benutzername ändern</strong>
				<input
					name="user-name"
					type="text"
					value={ user.Name }
					placeholder="Neuer Benutzername"
					required
				/>
			</label>
			<footer class="flex gap justify-end mt-lg">
				<a
					role="button"
					href={ templ.SafeURL(env.ServerPathPrefix + "/profile") }
					class="secondary flex gap"
				>
					<i class="bi bi-x-circle"></i>
					Schließen
				</a>
				<button type="submit" class="primary flex gap">
					<i class="bi bi-check-circle"></i>
					Ändern
				</button>
			</footer>
		</form>
	</dialog>
}

templ pageProfileAdditionalHead() {
	<style>
		.profile-header {
			background: var(--ui-color-100);
			padding: calc(var(--ui-spacing) * 2);
			margin-bottom: calc(var(--ui-spacing) * 2);
		}

		.profile-header h1 {
			margin: 0;
			color: var(--ui-text);
			font-size: 2.25rem;
		}

		.telegram-id {
			color: var(--ui-color-600);
			font-size: 0.95rem;
			background: var(--ui-color-200);
			padding: calc(var(--ui-spacing) / 2) var(--ui-spacing);
			border-radius: var(--ui-radius);
			border: var(--ui-border-width) var(--ui-border-style) var(--ui-color-300);
		}

		.profile-dialog {
			background: var(--ui-bg);
			border-radius: calc(var(--ui-radius) * 2);
			padding: calc(var(--ui-spacing) * 2);
			box-shadow: 0 10px 25px var(--ui-backdrop-color);
		}

		.profile-dialog label {
			margin-bottom: var(--ui-spacing);
		}

		.profile-dialog input {
			margin-top: calc(var(--ui-spacing) / 2);
			font-size: 1rem;
		}

		.no-cookies {
			text-align: center;
			color: var(--ui-color-600);
			padding: calc(var(--ui-spacing) * 2);
			background: var(--ui-color-100);
			border-radius: var(--ui-radius);
			font-style: italic;
		}
	</style>
}

templ CookiesDetails(cookies []*models.Cookie) {
	if len(cookies) > 0 {
		<details id="cookies" class="cookies-details" open>
			<summary class="cookies-summary">
				<i class="bi bi-cookie"></i>
				Aktive Sitzungen { fmt.Sprintf("%d", len(cookies)) }
			</summary>
			<figure class="overflow-auto">
				<table class="cookies-table borderless">
					<thead>
						<tr>
							<th style="width: fit-content;">Letzte Anmeldung</th>
							<th style="width: 100%;" class="left">Benutzeragent</th>
							<th style="width: fit-content;"></th>
						</tr>
					</thead>
					<tbody>
						for _, cookie := range cookies {
							<tr>
								<td class="time-cell">{ cookie.TimeString() }</td>
								<td class="left user-agent-cell">{ cookie.UserAgent }</td>
								<td class="right select-none">
									<a
										hx-delete={ utils.HXDeleteCookies(cookie.Value) }
										hx-trigger="click"
										hx-target="#cookies"
										hx-swap="outerHTML"
										hx-confirm="Sind Sie sicher, dass Sie dieses Cookie löschen möchten?"
										hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
										role="button"
										class="ghost destructive icon"
										title="Sitzung beenden"
									>
										<i class="bi bi-trash"></i>
									</a>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</figure>
		</details>
	} else {
		<div id="cookies" class="no-cookies">
			<i class="bi bi-info-circle"></i>
			Keine aktiven Sitzungen gefunden
		</div>
	}
}
