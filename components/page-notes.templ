package components

import (
	"fmt"
	"github.com/knackwurstking/pgpress/env"
	"github.com/knackwurstking/pgpress/models"
	"github.com/knackwurstking/pgpress/utils"
)

type PageNotesProps struct {
	Notes []*models.Note
	Tools []*models.Tool
}

templ PageNotes(props *PageNotesProps) {
	@Layout(
		LayoutOptions{
			PageTitle:      "PG Presse | Notizen Verwaltung",
			AppBarTitle:    "Notizen Verwaltung",
			NavContent:     StandardNavContent(),
			AdditionalHead: pageNotesScript(),
		},
	) {
		<main class="container fluid">
			<section class="filter-section mb">
				<div class="flex gap-sm justify-center items-center w-full flex-wrap">
					<button class="filter-btn active small" data-filter="all">
						Alle ({ fmt.Sprintf("%d", len(props.Notes)) })
					</button>
					{{
						brokenCount := 0
						attentionCount := 0
						infoCount := 0

						for _, note := range props.Notes {
							l := note.GetLinked()
							if l.Name == "tool" {
								skip := false
								for _, t := range props.Tools {
									if t.ID == l.ID && t.IsDead {
										skip = true
										break
									}
								}
								if skip {
									continue
								}
							}

							switch note.Level {
							case models.BROKEN:
								brokenCount++
							case models.ATTENTION:
								attentionCount++
							case models.INFO:
								infoCount++
							}
						}
					}}
					<button class="filter-btn small destructive flex gap-sm" data-filter="broken">
						<i class="bi bi-x-circle"></i>
						Defekt ({ fmt.Sprintf("%d", brokenCount) })
					</button>
					<button class="filter-btn small warning flex gap-sm" data-filter="attention">
						<i class="bi bi-exclamation-triangle"></i>
						Achtung ({ fmt.Sprintf("%d", attentionCount) })
					</button>
					<button class="filter-btn small info flex gap-sm" data-filter="info">
						<i class="bi bi-info-circle"></i>
						Info ({ fmt.Sprintf("%d", infoCount) })
					</button>
				</div>
			</section>
			<section class="notes-grid max-w-full" style="margin: 0 auto;">
				@NotesGrid(props.Notes, props.Tools)
			</section>
		</main>
	}
}

script pageNotesScript() {
	document.addEventListener('DOMContentLoaded', function() {
		const filterButtons = document.querySelectorAll('.filter-btn');
		const noteCards = document.querySelectorAll('.note-card');

		filterButtons.forEach(button => {
			button.addEventListener('click', function() {
				const filter = this.dataset.filter;

				filterButtons.forEach(btn => btn.classList.remove('active'));
				this.classList.add('active');

				noteCards.forEach(card => {
					const level = card.dataset.noteLevel;
					const shouldShow = filter === 'all' ||
						(filter === 'broken' && level === '2') ||
						(filter === 'attention' && level === '1') ||
						(filter === 'info' && level === '0');

					card.style.display = shouldShow ? 'block' : 'none';
				});
			});
		});
	});
}

templ NotesGrid(notes []*models.Note, tools []*models.Tool) {
	if len(notes) > 0 {
		<div class="notes-list grid gap-lg p" style="grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));">
			for _, note := range notes {
				{{
					skip := false
					l := note.GetLinked()
					if l.Name == "tool" {
						for _, t := range tools {
							if t.ID == l.ID && t.IsDead {
								skip = true
								break
							}
						}
					}

					filterClass := ""
					switch note.Level {
					case models.INFO:
						filterClass = "outline"
					case models.ATTENTION:
						filterClass = "warning outline"
					case models.BROKEN:
						filterClass = "destructive outline"
					}
				}}
				if !skip {
					@NotesCard(note, filterClass, tools)
				}
			}
		</div>
	} else {
		<div class="empty-state text-center" style="padding: 3rem 1rem;">
			<i class="bi bi-clipboard-x display-4 text-muted"></i>
			<h3>Keine Notizen vorhanden</h3>
			<p class="text-muted">Notizen können über die jeweiligen Werkzeug- oder Pressenseiten erstellt werden.</p>
		</div>
	}
}

templ NotesCard(note *models.Note, filterClass string, tools []*models.Tool) {
	<div
		class={ fmt.Sprintf("note-card card compact elevation-2 %s", filterClass) }
		data-note-level={ fmt.Sprintf("%d", note.Level) }
	>
		<div class="card-header flex gap-sm justify-between items-center">
			<span class="note-importance flex gap">
				switch note.Level {
					case models.INFO:
						<i class="bi bi-info-circle"></i>
					case models.ATTENTION:
						<i class="bi bi-exclamation-triangle"></i>
					case models.BROKEN:
						<i class="bi bi-x-circle"></i>
				}
				<span class="note-date">
					{ note.CreatedAt.Format("2006-01-02 15:04") }
				</span>
			</span>
			<span class="flex gap">
				<button
					class="icon secondary small"
					hx-get={ utils.HXGetNotesEditDialog(&note.ID, note.Linked) }
					hx-trigger="click"
					hx-target="body"
					hx-swap="beforeend"
					hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
					title="Notiz bearbeiten"
				>
					<i class="bi bi-pencil"></i>
				</button>
				<button
					class="icon small destructive"
					hx-delete={ utils.HXDeleteNote(note.ID) }
					hx-trigger="click"
					hx-confirm="Sind Sie sicher, dass Sie diese Notiz löschen möchten?"
					hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
					title="Notiz löschen"
				>
					<i class="bi bi-trash"></i>
				</button>
			</span>
		</div>
		<div class="card-body">
			{ note.Content }
		</div>
		if note.Linked != "" {
			<div class="card-footer">
				<small class="text-muted">
					Verknüpft mit:
					{{ linked := note.GetLinked() }}
					switch linked.Name {
						case "tool":
							for _, tool := range tools {
								if tool.ID == linked.ID {
									<a
										href={ templ.SafeURL(fmt.Sprintf("%s/tools/tool/%d", env.ServerPathPrefix, tool.ID)) }
										class="tool-link"
									>
										{ fmt.Sprintf("Werkzeug %s %s", tool.Format.String(), tool.Code) }
										if tool.Press != nil {
											({ fmt.Sprintf("Presse %d", *tool.Press) })
										}
									</a>
								}
							}
						case "press":
							<a
								href={ templ.SafeURL(fmt.Sprintf("%s/tools/press/%d", env.ServerPathPrefix, linked.ID)) }
								class="press-link"
							>
								{ fmt.Sprintf("Presse %d", linked.ID) }
							</a>
						default:
							<span>{ note.Linked }</span>
					}
				</small>
			</div>
		}
	</div>
}
