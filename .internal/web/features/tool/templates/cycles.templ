package templates

import (
	"fmt"

	"github.com/knackwurstking/pgpress/internal/constants"
	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/web/shared/components"
	"github.com/knackwurstking/pgpress/internal/web/shared/helpers"
	"github.com/knackwurstking/pgpress/pkg/models"
)

type CyclesProps struct {
	User            *models.User
	Tool            *models.ResolvedTool
	ToolsForBinding []*models.Tool
	ToolPosition    string
	TotalCycles     int64
	Cycles          []*models.Cycle
	Regenerations   []*models.ResolvedRegeneration
}

templ Cycles(props CyclesProps) {
	@components.SectionTitle(components.TitleLevelMain, "Werkzeugnutzung & Zyklen")
	<div class="flex flex-col gap">
		@toolStatusSection(props)
		@regenerationsSection(props)
		@cyclesSection(props)
	</div>
}

templ toolStatusSection(props CyclesProps) {
	<section id="tool-status-section">
		@components.SectionTitle(components.TitleLevelSub, "Aktueller Status")
		@toolStatus(props.Tool, props.ToolsForBinding, props.User)
	</section>
}

templ toolStatus(tool *models.ResolvedTool, toolsForBinding []*models.Tool, user *models.User) {
	<div class="flex flex-col gap">
		<span class="flex gap-lg">
			// Show status and start or stop a regenaration
			@components.ToolStatusEdit(&components.ToolStatusEditProps{
				Tool:              tool.Tool,
				UserHasPermission: user.IsAdmin(),
			})
			// On active tools, link (button) to press page
			if tool.IsActive() {
				<a
					role="button"
					class="small ghost flex gap"
					href={ fmt.Sprintf(
					"%s/tools/press/%d",
					env.ServerPathPrefix, *tool.Press,
				) }
					title="Zur Pressenübersicht"
				>
					<i class="bi bi-arrow-right"></i>
					Presse { fmt.Sprintf("%d", *tool.Press) }
				</a>
			}
		</span>
		// (Un)Bind Top and TopCassette tools
		if tool.IsBindable() {
			@BindingSection(BindingSectionProps{
				Tool:            tool,
				ToolsForBinding: toolsForBinding,
				IsAdmin:         user.IsAdmin(),
			})
		}
	</div>
}

templ regenerationsSection(props CyclesProps) {
	<section id="regenerations-section">
		@components.SectionTitle(components.TitleLevelSub, "Regerationen")
		if len(props.Regenerations) == 0 {
			<span class="flex justify-center items-center">
				<i><small>Keine Regenerationen verzeichnet für dieses Werkzeug </small> </i>
			</span>
		} else {
			@regenerationsTable(props.Regenerations, props.User)
		}
	</section>
}

templ regenerationsTable(regenerations []*models.ResolvedRegeneration, user *models.User) {
	<figure class="w-full overflow-x-scroll">
		<table title="Regenerationen">
			<thead>
				<tr>
					<th name="date">Datum</th>
					<th name="reason">Grund</th>
					<th name="actions"></th>
				</tr>
			</thead>
			<tbody>
				if len(regenerations) == 0 {
					<tr>
						<td colspan="3" class="text-center">
							<i><small>Keine Regenerationen verzeichnet</small></i>
						</td>
					</tr>
				} else {
					@regenerationsTableRows(regenerations, user)
				}
			</tbody>
		</table>
	</figure>
}

templ regenerationsTableRows(regenerations []*models.ResolvedRegeneration, user *models.User) {
	for _, regen := range regenerations {
		<tr>
			<td>
				<span>{ regen.GetCycle().Date.Format(constants.DateFormat) }</span>
			</td>
			<td>
				<span>{ regen.Reason }</span>
			</td>
			<td>
				@components.TableActions(components.TableActionsOptions{
					EditHref:        helpers.HXGetToolRegenerationEdit(regen.GetTool().ID, &regen.ID),
					EditAdminOnly:   false,
					DeleteHref:      helpers.HXDeleteToolRegeneration(regen.GetTool().ID, regen.ID),
					DeleteAdminOnly: true,
					User:            user,
				})
			</td>
		</tr>
	}
}

templ cyclesSection(props CyclesProps) {
	<section id="cycles-section">
		@components.SectionTitle(components.TitleLevelSub, "Pressennutzungsverlauf") {
			<button
				class="icon secondary small flex"
				hx-get={ helpers.HXGetCycleEditDialog(props.Tool.ID, nil, false) }
				hx-trigger="click"
				hx-target="body"
				hx-swap="beforeend"
				hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
				title="Neuen Eintrag hinzufügen"
				if !props.User.IsAdmin() {
					disabled
				}
			>
				<i class="bi bi-plus-lg"></i>
			</button>
		}
		<section>
			<h6 class="mb">
				Gesamtzyklen für "{ fmt.Sprintf("%s %s %s",
					props.Tool.Format.String(), props.Tool.Code, props.Tool.Type) }":
			</h6>
			<span>
				@components.TotalCycles(props.TotalCycles, true)
			</span>
		</section>
		@cyclesTable(props)
	</section>
}

templ cyclesTable(props CyclesProps) {
	<figure class="w-full overflow-x-scroll">
		<table
			name="tool-cycles-table"
			class="table borderless compact"
			title="Zyklusverlauf"
		>
			<thead>
				<tr>
					<th name="press">Presse</th>
					<th name="date">Datum</th>
					<th name="total">Gesamtzyklen</th>
					<th name="partial">Teilzyklen (berechnet)</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				if len(props.Cycles) == 0 {
					<tr>
						<td colspan="5" class="text-center">
							<i><small>Kein Pressenverlauf verfügbar</small></i>
						</td>
					</tr>
				} else {
					{{
						var lastRegeneration *models.ResolvedRegeneration
						if len(props.Regenerations) > 0 {
							lastRegeneration = props.Regenerations[0]
						}
					}}
					for _, cycle := range props.Cycles {
						@cycleRowWithPartialCalc(cycle, lastRegeneration, props)
					}
				}
			</tbody>
		</table>
	</figure>
}

templ cycleRowWithPartialCalc(
	cycle *models.Cycle,
	lastRegeneration *models.ResolvedRegeneration,
	props CyclesProps,
) {
	<tr
		if lastRegeneration != nil && lastRegeneration.CycleID == cycle.ID {
			style="color: var(--ui-muted);"
		}
	>
		<td>
			<span>{ fmt.Sprintf("%d", cycle.PressNumber) }</span>
		</td>
		<td>
			<span class="text-sm">{ cycle.Date.Format(constants.DateFormat) }</span>
		</td>
		<td>
			{ fmt.Sprintf("%d", cycle.TotalCycles) }
		</td>
		<td>
			<span title="Berechnet: Gesamtzyklen - Gesamtzyklen des letzten Eintrags">
				{ fmt.Sprintf("%d", cycle.PartialCycles) }
			</span>
		</td>
		<td>
			@components.TableActions(components.TableActionsOptions{
				EditHref:        helpers.HXGetCycleEditDialog(props.Tool.ID, &cycle.ID, false),
				EditAdminOnly:   true,
				DeleteHref:      helpers.HXDeleteCycle(cycle.ID, props.Tool.ID),
				DeleteAdminOnly: true,
				User:            props.User,
			})
		</td>
	</tr>
}
