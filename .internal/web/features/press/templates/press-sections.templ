package templates

import (
	"fmt"
	"strconv"

	"github.com/knackwurstking/pgpress/internal/constants"
	"github.com/knackwurstking/pgpress/internal/web/shared/components"
	"github.com/knackwurstking/pgpress/internal/web/shared/helpers"
	"github.com/knackwurstking/pgpress/pkg/models"
	"strings"
)

type PressNotesSectionProps struct {
	Notes []*models.Note
	Tools []*models.Tool
	Press models.PressNumber
}

// PressNotesSection renders the notes section for all tools on a press
templ PressNotesSection(props PressNotesSectionProps) {
	{{
		pressNotes := make([]*models.Note, 0)
		toolNotes := make([]*models.Note, 0)
		for _, n := range props.Notes {
			if strings.HasPrefix(n.Linked, "press_") {
				pressNotes = append(pressNotes, n)
			} else if strings.HasPrefix(n.Linked, "tool_") {
				toolNotes = append(toolNotes, n)
			}
		}
	}}
	@pressNotesSection(pressNotes, props.Press)
	if len(toolNotes) > 0 {
		@toolNotesSection(toolNotes, props.Tools)
	}
}

templ pressNotesSection(notes []*models.Note, press models.PressNumber) {
	if len(notes) > 0 {
		// Press Notes
		<section class="notes-list flex flex-col gap-lg p">
			for _, note := range notes {
				@components.NoteCard(note)
			}
		</section>
		<section class="flex justify-center mt">
			<button
				class="primary"
				hx-get={ helpers.HXGetNotesEditDialog(nil, fmt.Sprintf("press_%d", press)) }
				hx-trigger="click"
				hx-target="body"
				hx-swap="beforeend"
				hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
				title="Neue Notiz für diese Presse hinzufügen"
			>
				<i class="bi bi-plus-lg"></i>
				Notiz hinzufügen
			</button>
		</section>
	} else {
		<section class="empty-state">
			<h4>Keine Notizen</h4>
			<p>Es gibt keine Notizen für Werkzeuge auf dieser Presse.</p>
			<button
				class="primary"
				hx-get={ helpers.HXGetNotesEditDialog(nil, fmt.Sprintf("press_%d", press)) }
				hx-trigger="click"
				hx-target="body"
				hx-swap="beforeend"
				hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
				title="Neue Notiz für diese Presse hinzufügen"
			>
				<i class="bi bi-plus-lg"></i>
				Erste Notiz hinzufügen
			</button>
		</section>
	}
}

templ toolNotesSection(notes []*models.Note, tools []*models.Tool) {
	<section class="notes-list flex flex-col gap-lg p">
		{{
				topToolNotes := make([]*models.Note, 0)
				topCassetteToolNotes := make([]*models.Note, 0)
				bottomToolNotes := make([]*models.Note, 0)
				for _, n := range notes {
					sID, _ := strings.CutPrefix(n.Linked, "tool_")
					id, _ := strconv.ParseInt(sID, 10, 64)
					for _, t := range tools {
						if t.ID != id {
							continue
						}

						switch t.Position {
						case models.PositionTop:
							topToolNotes = append(topToolNotes, n)
						case models.PositionTopCassette:
							topCassetteToolNotes = append(topCassetteToolNotes, n)
						case models.PositionBottom:
							bottomToolNotes = append(bottomToolNotes, n)
						}
					}
				}
		}}
		if len(topToolNotes) > 0 {
			<h4>{ models.PositionTop.GermanString() }</h4>
			for _, n := range topToolNotes {
				@components.NoteCard(n)
			}
		}
		if len(topCassetteToolNotes) > 0 {
			<h4>{ models.PositionTopCassette.GermanString() }</h4>
			for _, n := range topCassetteToolNotes {
				@components.NoteCard(n)
			}
		}
		if len(bottomToolNotes) > 0 {
			<h4>{ models.PositionBottom.GermanString() }</h4>
			for _, n := range bottomToolNotes {
				@components.NoteCard(n)
			}
		}
	</section>
}

// PressActiveToolsSection renders the active tools section content for HTMX
templ PressActiveToolsSection(tools []*models.Tool, press models.PressNumber) {
	<div class="flex flex-col gap">
		if len(tools) == 0 {
			<div class="text-center text-muted">
				Keine aktiven Werkzeuge für diese Presse
			</div>
		} else {
			for _, t := range tools {
				@components.ToolAnchor(models.NewResolvedTool(t, nil, nil), nil)
			}
		}
	</div>
}

type MetalSheetSectionProps struct {
	MetalSheets []*models.MetalSheet
	ToolsMap    map[int64]*models.Tool
	Press       models.PressNumber
}

// MetalSheetsSection renders the metal sheets section content for HTMX
templ MetalSheetsSection(props MetalSheetSectionProps) {
	{{ expectedMachineType := models.GetMachineTypeForPress(props.Press) }}
	<div class="flex flex-col gap-sm">
		<div class="text-center">
			<small class="text-muted">
				Zeigt nur Bleche für { expectedMachineType.DisplayName() }
				(Presse { fmt.Sprintf("%d", props.Press) })
			</small>
		</div>
		@MetalSheetTablesCollapsible(props.MetalSheets, props.ToolsMap)
	</div>
}

type PressCyclesSectionProps struct {
	Cycles   []*models.Cycle
	ToolsMap map[int64]*models.Tool
	User     *models.User
	Press    models.PressNumber
}

// PressCyclesSection renders the cycles section content for HTMX
templ PressCyclesSection(props PressCyclesSectionProps) {
	<figure class="w-full overflow-x-scroll">
		<table name="additional-cycles-table" class="table borderless compact">
			<thead>
				<tr>
					<th>Datum</th>
					<th>Werkzeug</th>
					<th>Position</th>
					<th>Gesamtzyklen</th>
					<th>Teilzyklen (berechnet)</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@renderPressCyclesRows(props)
			</tbody>
		</table>
	</figure>
}

// renderCyclesRows renders the cycle table rows
templ renderPressCyclesRows(props PressCyclesSectionProps) {
	if len(props.Cycles) == 0 {
		<tr>
			<td colspan="6" class="text-center">
				Kein Pressenverlauf verfügbar
			</td>
		</tr>
	} else {
		for _, cycle := range props.Cycles {
			@renderPressCycleRow(cycle, props)
		}
	}
}

// renderCycleRow renders a single cycle table row
templ renderPressCycleRow(cycle *models.Cycle, props PressCyclesSectionProps) {
	<tr>
		// Cycle Date
		<td>
			<span class="text-sm">{ cycle.Date.Format(constants.DateFormat) }</span>
		</td>
		// Cycle Tool
		<td>
			{{ tool, exists := props.ToolsMap[cycle.ToolID] }}
			if exists && tool != nil {
				<span class="text-xs">
					{ fmt.Sprintf("%s %s %s",
						tool.Format.String(), tool.Code, tool.Type) }
				</span>
			} else {
				<span class="text-xs">{ fmt.Sprintf("%d", cycle.ToolID) }</span>
			}
		</td>
		// Cycle Position
		<td>
			<span class="text-xs">{ cycle.ToolPosition.GermanString() }</span>
		</td>
		// Total Cycles
		<td>
			{ fmt.Sprintf("%d", cycle.TotalCycles) }
		</td>
		// Partial Cycles
		<td>
			<span title="Berechnet: Gesamtzyklen - Gesamtzyklen des letzten Eintrags">
				{ fmt.Sprintf("%d", cycle.PartialCycles) }
			</span>
		</td>
		// Actions
		<td>
			<span class="button-group flex justify-end items-center">
				@components.TableActions(components.TableActionsOptions{
					EditHref:        helpers.HXGetCycleEditDialog(cycle.ToolID, &cycle.ID, true),
					EditAdminOnly:   true,
					DeleteHref:      helpers.HXDeleteCycle(cycle.ID, cycle.ToolID),
					DeleteAdminOnly: true,
					User:            props.User,
				})
			</span>
		</td>
	</tr>
}
