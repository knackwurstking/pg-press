package templates

import (
	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/pkg/models"
)

const (
	IDToolsFilter = "tools-filter"
)

templ SectionTools(tools []*models.ResolvedTool) {
	<span
		hx-get={ env.ServerPathPrefix + "/htmx/tools/section/tools" }
		hx-trigger="pageLoaded from:body"
		hx-target="#section-tools-list"
		hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
	></span>
	<summary>
		<h4>
			<i class="bi bi-archive mr"></i>
			Alle Werkzeuge
		</h4>
	</summary>
	@sectionToolsFilter(tools)
	<div class="all-tools p">
		<div class="actions-bar flex gap justify-end items-center">
			<button
				type="button"
				class="primary flex gap"
				hx-get={ env.ServerPathPrefix + "/htmx/tools/edit" }
				hx-trigger="click"
				hx-target="body"
				hx-swap="beforeend"
				hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
			>
				<i class="bi bi-plus-lg"></i>
				<span>Erstellen</span>
			</button>
		</div>
		<ul class="flex flex-col gap m-t p-0" style="list-style: none;">
			@ToolsList(tools)
		</ul>
	</div>
	@sectionToolsFilterScript()
}

templ sectionToolsFilter(tools []*models.ResolvedTool) {
	<div class="flex gap-sm flex-wrap justify-evenly">
		<!-- Filter for Tool Format -->
		<label class="flex flex-1 flex-col gap-0" style="width: 100%;">
			Suche (Lazy)
			<input
				id={ IDToolsFilter }
				type="search"
				oninput="filterToolsList();"
				placeholder="z.B.: kassette 120x60 mass"
				hx-preserve="true"
			/>
		</label>
	</div>
}

templ sectionToolsFilterScript() {
	<script>
		function filter(value) {
			for (var el of document.querySelectorAll(`.all-tools ul > *`)) {
				// Get the text content of the element
				var textContent = el.textContent.toLowerCase();

				// Generate special regexp from search
				var valueSplit = document.querySelector("input#{{ IDToolsFilter }}").value.toLowerCase().split(' ');

				// Check and Set "block" or "none"
				let shouldNotHide = true;
				for (var char of valueSplit) {
					if (char === "") continue;

					if (!textContent.includes(char)) {
						shouldNotHide = false;
						break;
					}
				}

				el.style.display = shouldNotHide ? "block" : "none";
			}
		}

		function filterToolsList() {
			var params = new URLSearchParams(location.search);

			var inputValue = document.querySelector("input#{{ IDToolsFilter }}").value;

			if (inputValue !== "") {
				params.set("tools_filter", inputValue);
			} else {
				params.delete("tools_filter");
			}

			filter(inputValue);


			// Update browser history to include filter parameters
			var newUrl = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
			window.history.replaceState({}, '', newUrl);
		}

		setTimeout(function() {
			var params = new URLSearchParams(window.location.search);
			document.querySelector("input#{{ IDToolsFilter }}").value = params.get("tools_filter");
			filterToolsList();
		}, 100);
	</script>
}
