package templates

import (
	"fmt"

	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/web/shared/components"
	"github.com/knackwurstking/pgpress/pkg/models"
)

templ SectionPress(pressUtilization []models.PressUtilization) {
	<span
		hx-get={ env.ServerPathPrefix + "/htmx/tools/section/press" }
		hx-trigger="pageLoaded from:body"
		hx-target="#section-press"
		hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
	></span>
	<summary>
		<h4>
			<i class="bi bi-gear-fill mr"></i>
			Eingebaute Werkzeuge
		</h4>
	</summary>
	<ul class="flex flex-col gap m-0 p-0" style="list-style: none;">
		for _, u := range pressUtilization {
			{{
				var (
					top         string
					topCassette string
					bottom      string
				)

				for _, t := range u.Tools {
					switch t.Position {
					case models.PositionTop:
						top = fmt.Sprintf("%s %s %s", t.Format.String(), t.Code, t.Type)
					case models.PositionTopCassette:
						topCassette = fmt.Sprintf("%s %s %s", t.Format.String(), t.Code, t.Type)
					case models.PositionBottom:
						bottom = fmt.Sprintf("%s %s %s", t.Format.String(), t.Code, t.Type)
					}
				}
			}}
			@sectionPressListItem(pressListItemProps{
				Title:       fmt.Sprintf("Presse %d", u.PressNumber),
				Top:         top,
				TopCassette: topCassette,
				Bottom:      bottom,
				Href:        fmt.Sprintf("%s/tools/press/%d", env.ServerPathPrefix, u.PressNumber),
			})
		}
	</ul>
}

type pressListItemProps struct {
	Title       string
	Top         string
	TopCassette string
	Bottom      string
	Href        string
}

templ sectionPressListItem(props pressListItemProps) {
	<li title={ props.Title }>
		<a
			role="button"
			href={ props.Href }
			class="outline contrast flex justify-between items-center"
		>
			<span class="flex flex-col gap-lg w-full">
				<h5>{ props.Title }</h5>
				<span class="flex flex-wrap gap-lg justify-between items-center w-full">
					if props.Top != "" || props.TopCassette != "" {
						@renderTopTools(props.Top, props.TopCassette)
					}
					if props.Bottom != "" {
						@renderBottomTools(props.Bottom)
					}
				</span>
			</span>
			<i class="bi bi-chevron-right"></i>
		</a>
	</li>
}

templ renderTopTools(top, cassette string) {
	<!-- Upper Tool -->
	<span class="flex flex-col gap-sm">
		if top != "" {
			<span class="flex flex-col gap-0 justify-center items-start gap-sm">
				@components.PositionBadge(
					models.PositionTop, "primary text-bold",
				)
				<small class="text-sm">{ top }</small>
			</span>
		}
		if cassette != "" {
			<span class="flex flex-col gap-0 justify-center items-start gap-sm">
				@components.PositionBadge(
					models.PositionTopCassette, "primary text-bold",
				)
				<small class="text-sm">{ cassette }</small>
			</span>
		}
	</span>
}

templ renderBottomTools(bottom string) {
	<!-- Lower Tool -->
	<span class="flex flex-col justify-center items-start gap-sm">
		@components.PositionBadge(models.PositionBottom, "primary text-bold")
		<small class="text-sm">{ bottom }</small>
	</span>
}
