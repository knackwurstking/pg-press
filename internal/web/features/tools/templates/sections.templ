package templates

import (
	"fmt"

	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/web/shared/components"
	"github.com/knackwurstking/pgpress/pkg/models"
	"slices"
)

templ SectionPress(pressUtilization []models.PressUtilization) {
	<span
		hx-get={ env.ServerPathPrefix + "/htmx/tools/section/press" }
		hx-trigger="pageLoaded from:body"
		hx-target="#section-press"
		hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
	></span>
	<summary>
		<h4>
			<i class="bi bi-gear-fill mr"></i>
			Eingebaute Werkzeuge
		</h4>
	</summary>
	<ul class="flex flex-col gap m-0 p-0" style="list-style: none;">
		for _, u := range pressUtilization {
			{{
					var (
						top         string
						topCassette string
						bottom      string
					)

					for _, t := range u.Tools {
						switch t.Position {
						case models.PositionTop:
							top = fmt.Sprintf("%s %s %s", t.Format.String(), t.Code, t.Type)
						case models.PositionTopCassette:
							topCassette = fmt.Sprintf("%s %s %s", t.Format.String(), t.Code, t.Type)
						case models.PositionBottom:
							bottom = fmt.Sprintf("%s %s %s", t.Format.String(), t.Code, t.Type)
						}
					}
			}}
			@sectionPressListItem(
				fmt.Sprintf("Presse %d", u.PressNumber),
				top,
				topCassette,
				bottom,
				fmt.Sprintf("%s/tools/press/%d", env.ServerPathPrefix, u.PressNumber),
			)
		}
	</ul>
}

templ SectionTools(tools []*models.ToolWithNotes) {
	<span
		hx-get={ env.ServerPathPrefix + "/htmx/tools/section/tools" }
		hx-trigger="pageLoaded from:body"
		hx-target="#section-tools-list"
		hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
	></span>
	<summary>
		<h4>
			<i class="bi bi-archive mr"></i>
			Alle Werkzeuge
		</h4>
	</summary>
	@sectionToolsFilter(tools)
	<div class="all-tools p">
		<div class="actions-bar flex gap justify-end items-center">
			<button
				type="button"
				class="primary flex gap"
				hx-get={ env.ServerPathPrefix + "/htmx/tools/edit" }
				hx-trigger="click"
				hx-target="body"
				hx-swap="beforeend"
				hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
			>
				<i class="bi bi-plus-lg"></i>
				<span>Erstellen</span>
			</button>
		</div>
		<ul class="flex flex-col gap m-t p-0" style="list-style: none;">
			@ToolsList(tools)
		</ul>
	</div>
}

templ sectionPressListItem(title, top, topCassette, bottom, href string) {
	<li title={ title }>
		<a
			role="button"
			href={ href }
			class="outline contrast flex justify-between items-center"
		>
			<span class="flex flex-col gap-lg w-full">
				<h5>{ title }</h5>
				<span class="flex flex-wrap gap-lg justify-between items-center w-full">
					if top != "" || topCassette != "" {
						<!-- Upper Tool -->
						<span class="flex flex-col gap-sm">
							if top != "" {
								<span class="flex flex-col gap-0 justify-center items-start gap-sm">
									@components.PositionBadge(models.PositionTop, "primary text-bold")
									<small class="text-sm">{ top }</small>
								</span>
							}
							if topCassette != "" {
								<span class="flex flex-col gap-0 justify-center items-start gap-sm">
									@components.PositionBadge(models.PositionTopCassette, "primary text-bold")
									<small class="text-sm">{ topCassette }</small>
								</span>
							}
						</span>
					}
					if bottom != "" {
						<!-- Lower Tool -->
						<span class="flex flex-col justify-center items-start gap-sm">
							@components.PositionBadge(models.PositionBottom, "primary text-bold")
							<small class="text-sm">{ bottom }</small>
						</span>
					}
				</span>
			</span>
			<i class="bi bi-chevron-right"></i>
		</a>
	</li>
}

templ sectionToolsFilter(tools []*models.ToolWithNotes) {
	{{
		formats := []string{}
		codes := []string{}
		types := []string{}
		positions := []string{}

		for _, t := range tools {
			if f := t.Format.String(); !slices.Contains(formats, f) {
				formats = append(formats, f)
			}

			if c := t.Code; !slices.Contains(codes, c) {
				codes = append(codes, c)
			}

			if t := t.Type; !slices.Contains(types, t) {
				types = append(types, t)
			}

			if p := t.Position.GermanString(); !slices.Contains(positions, p) {
				positions = append(positions, p)
			}
		}
	}}
	<div class="flex gap-sm flex-wrap justify-evenly">
		<!-- Filter for Tool Format -->
		<label class="flex flex-1 flex-col gap-0" style="max-width: 8rem;">
			Format
			<input
				id="tool-format-input"
				type="text"
				list="formats"
				placeholder="Format"
				oninput={ filterToolsList() }
				hx-preserve="true"
			/>
			<datalist id="formats">
				for _, f := range formats {
					<option value={ f }></option>
				}
			</datalist>
		</label>
		<!-- Filter for Tool Code -->
		<label class="flex flex-1 flex-col gap-0" style="max-width: 10rem;">
			Code
			<input
				id="tool-code-input"
				type="text"
				list="codes"
				placeholder="Code"
				oninput={ filterToolsList() }
				hx-preserve="true"
			/>
			<datalist id="codes">
				for _, c := range codes {
					<option value={ c }></option>
				}
			</datalist>
		</label>
		<!-- Filter for Tool Type -->
		<label class="flex flex-1 flex-col gap-0" style="max-width: 13rem;">
			Type
			<input
				id="tool-type-input"
				type="text"
				list="types"
				placeholder="Type"
				oninput={ filterToolsList() }
				hx-preserve="true"
			/>
			<datalist id="types">
				for _, t := range types {
					<option value={ t }></option>
				}
			</datalist>
		</label>
		<!-- Filter for Tool Position -->
		<label class="flex flex-1 flex-col gap-0" style="max-width: 13rem;">
			Position
			<input
				id="tool-position-input"
				type="text"
				list="positions"
				placeholder="Position"
				oninput={ filterToolsList() }
				hx-preserve="true"
			/>
			<datalist id="positions">
				for _, p := range positions {
					<option value={ p }></option>
				}
			</datalist>
		</label>
	</div>
}

script filterToolsList() {
	var formatInput = document.querySelector(`input[list="formats"]`).value.toLowerCase();
	var codeInput = document.querySelector(`input[list="codes"]`).value.toLowerCase();
	var typeInput = document.querySelector(`input[list="types"]`).value.toLowerCase();
	var positionInput = document.querySelector(`input[list="positions"]`).value.toLowerCase();

	for (var el of document.querySelectorAll(`.all-tools ul > *`)) {
	    var format = el.getAttribute("data-format").toLowerCase();
	    var code = el.getAttribute("data-code").toLowerCase();
	    var type = el.getAttribute("data-type").toLowerCase();
	    var position = el.getAttribute("data-position").toLowerCase();

		if (
    		(format.includes(formatInput) || formatInput === "") &&
			(code.includes(codeInput) || codeInput === "") &&
			(type.includes(typeInput) || typeInput === "") &&
			(position.includes(positionInput) || positionInput === "")
		) {
            el.style.display = "block";
		} else {
		    el.style.display = "none";
		}
	}
}
