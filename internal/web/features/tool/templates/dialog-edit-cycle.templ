package templates

import (
	"fmt"
	"time"

	"github.com/knackwurstking/pgpress/internal/constants"
	"github.com/knackwurstking/pgpress/internal/web/shared/dialogs"
	"github.com/knackwurstking/pgpress/internal/web/shared/helpers"
	"github.com/knackwurstking/pgpress/pkg/models"
)

type DialogEditCycleProps struct {
	Tool    *models.Tool
	CycleID int64

	InputTotalCycles int64
	InputPressNumber *models.PressNumber
	OriginalDate     *time.Time

	// Tool change mode
	AllowToolChange bool
	AvailableTools  []*models.Tool
}

templ DialogEditCycle(props *DialogEditCycleProps) {
	{{
		var (
			baseType         = "POST"
			submitButtonText = "Erstellen"
			baseHref         = helpers.HXPostCycleEdit(props.Tool.ID)
		)

		if props.CycleID > 0 {
			baseType = "PUT"
			submitButtonText = "Aktualisieren"
			baseHref = helpers.HXPutCycleEdit(props.CycleID)
		}
	}}
	@dialogs.Base(dialogs.BaseProps{
		Type:             baseType,
		Href:             baseHref,
		ID:               "cycle-edit-dialog",
		SubmitButtonText: submitButtonText,
	}) {
		<!-- Tool selection or display -->
		if props.AllowToolChange && len(props.AvailableTools) > 0 {
			<section class="tool-selection flex flex-col gap-sm min-w-0">
				<label for="tool_id">Werkzeug auswählen</label>
				<select id="tool_id" name="tool_id" required class="w-full max-w-full min-w-0 text-sm overflow-hidden text-ellipsis">
					<option value="" disabled selected?={ props.Tool == nil }>
						Werkzeug auswählen
					</option>
					for _, tool := range props.AvailableTools {
						<option
							value={ fmt.Sprintf("%d", tool.ID) }
							selected?={ props.Tool != nil && props.Tool.ID == tool.ID }
							if tool.IsDead {
								class="text-gray-500 italic"
							}
						>
							{{
								statusText := ""
								if tool.Press != nil {
									statusText = fmt.Sprintf(" P%d", *tool.Press)
								}
								if tool.Regenerating {
									statusText += " R"
								}
								if tool.IsDead {
									statusText += " ✗"
								}
							}}
							{ fmt.Sprintf("%s %s%s", tool.Code, tool.Format.String(), statusText) }
						</option>
					}
				</select>
			</section>
			<!-- Hidden field to track original tool ID for tool changes -->
			if props.CycleID > 0 && props.Tool != nil {
				<input type="hidden" name="original_tool_id" value={ fmt.Sprintf("%d", props.Tool.ID) }/>
			}
		} else if props.Tool != nil {
			<!-- Display active tool information -->
			<section class="tool-info flex flex-col gap-sm">
				<label>Aktives Werkzeug</label>
				<div class="flex flex-col gap-xs">
					<div class="text-sm">
						<strong>Werkzeug:</strong> { props.Tool.String() }
					</div>
					<div class="text-sm">
						<strong>Position:</strong> { props.Tool.Position.GermanString() }
					</div>
				</div>
			</section>
		}
		<section class="press flex flex-col gap-sm">
			<label for="press">Presse</label>
			<select id="press" name="press_number" required>
				<option
					value=""
					disabled
					selected?={ props.Tool != nil &&
						props.Tool.Press == nil &&
						props.InputPressNumber == nil }
				>
					Presse auswählen
				</option>
				for _, i := range []int{0, 2, 3, 4, 5} {
					<option
						value={ fmt.Sprintf("%d", i) }
						selected?={ (props.InputPressNumber != nil &&
							int(*props.InputPressNumber) == i) || (props.InputPressNumber == nil &&
							props.Tool != nil &&
							isPress(props.Tool.Press, i)) }
					>
						Presse { fmt.Sprintf("%d", i) }
					</option>
				}
			</select>
		</section>
		<section class="original-date flex flex-col gap-sm">
			<label>Ursprüngliches Datum</label>
			<input
				name="original_date"
				type="text"
				if props.OriginalDate == nil {
					value={ time.Now().Format(constants.DateFormat) }
				} else {
					value={ props.OriginalDate.Format(constants.DateFormat) }
				}
				title="Datum des ursprünglichen Eintrags (wird nicht geändert)"
			/>
		</section>
		<section class="total-cycles flex flex-col gap-sm">
			<label>Gesamtzyklen</label>
			<input
				type="number"
				min="0"
				step="1"
				id="total_cycles"
				name="total_cycles"
				placeholder="Gesamtzyklen"
				if props.InputTotalCycles != 0 {
					value={ fmt.Sprintf("%d", props.InputTotalCycles) }
				}
				required
			/>
		</section>
		<section class="regeneration">
			<label class="flex flex-row justify-between items-center">
				<span class="flex flex-col gap-0">
					if props.CycleID > 0 {
						<small>
							Werkzeug wurde Regeneriert nach diesem Zyklus
						</small>
					} else {
						<span>
							Werkzeug in den Regenerationszustand versetzen
						</span>
					}
				</span>
				<script>
					function checkboxOnChangeHandler(e) {
						if (e.checked) {
							if (!confirm("Sicher, diesen Zustand ändern?")) {
								e.checked = false;
							}
						}
					}
				</script>
				<input
					name="regenerating"
					type="checkbox"
					onchange="checkboxOnChangeHandler(this);"
				/>
			</label>
		</section>
	}
}

func isPress(p *models.PressNumber, v int) bool {
	if p == nil {
		return false
	}

	return int(*p) == v
}
