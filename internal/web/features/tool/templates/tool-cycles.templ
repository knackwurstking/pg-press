package templates

import (
	"fmt"

	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/web/shared/components"
	"github.com/knackwurstking/pgpress/pkg/models"
)

type ToolCyclesProps struct {
	User             *models.User
	Tool             *models.Tool
	BoundTool        *models.Tool
	Tools            []*models.Tool
	ToolPosition     string
	TotalCycles      int64
	Cycles           []*models.Cycle
	LastRegeneration *models.Regeneration
}

templ ToolCycles(props *ToolCyclesProps) {
	<div class="flex flex-col gap">
		<h4>Werkzeugnutzung & Zyklen</h4>
		<section class="status">
			<div class="flex justify-between items-center mb">
				<h5>Aktueller Status</h5>
			</div>
			<div class="flex flex-col gap">
				<span class="flex gap-lg">
					@components.ToolStatusEdit(&components.ToolStatusEditProps{
						Tool:              props.Tool,
						UserHasPermission: props.User.IsAdmin(),
					})
					if props.Tool.IsActive() {
						<a
							role="button"
							class="small ghost flex gap"
							href={ fmt.Sprintf(
							"%s/tools/press/%d",
							env.ServerPathPrefix, *props.Tool.Press,
						) }
							title="Zur Pressenübersicht"
						>
							<i class="bi bi-arrow-right"></i>
							Presse { fmt.Sprintf("%d", *props.Tool.Press) }
						</a>
					}
				</span>
				// (Un)Bind Top and TopCassette tools
				if len(props.Tools) > 0 {
					<span
						class="flex gap"
						if !props.User.IsAdmin() {
							disabled
						}
					>
						{{
							var positionForBinding models.Position
							if props.Tool.Position == models.PositionTop {
								positionForBinding = models.PositionTopCassette
							} else {
								positionForBinding = models.PositionTop
							}
						}}
						<select
							id="tool-binding-select"
							hx-patch={ fmt.Sprintf(
								"%s/htmx/tools/tool/%d/bind",
								env.ServerPathPrefix,
								props.Tool.ID,
							) }
							hx-trigger="change"
							hx-vals="js:{target_id: event.target.value}"
							hx-swap="none"
						>
							<option
								value=""
								disabled
								selected?={ props.Tool.Binding == nil || *props.Tool.Binding > 0 }
							>
								{ positionForBinding.GermanString() } Binden
							</option>
							// Render options, all top tools unbound
							for _, t := range props.Tools {
								<option
									value={ t.ID }
									selected?={ props.Tool.Binding != nil && t.ID == *props.Tool.Binding }
								>{ t.String() } { t.Type }</option>
							}
						</select>
						<button
							class="small ghost destructive"
							hx-patch={ fmt.Sprintf(
										"%s/htmx/tools/tool/%d/unbind",
										env.ServerPathPrefix,
										props.Tool.ID,
									) }
							hx-trigger="click"
							hx-swap="none"
							hx-on:htmx:after-request="
								if(event.detail.successful) {
									document.getElementById('tool-binding-select').selectedIndex = 0;
								}
							"
						>
							{ positionForBinding.GermanString() } Entbinden
						</button>
					</span>
				}
				// Navigation link to bound tool if binding exists
				if props.Tool.Binding != nil && props.BoundTool != nil {
					<div class="card compact info flex gap items-center px-md py-sm">
						<i class="bi bi-arrow-left-right text-lg"></i>
						<div class="flex flex-col gap-xs">
							<span class="text-sm text-medium">Gebunden mit:</span>
							<a
								role="button"
								class="small primary flex gap items-center"
								href={ fmt.Sprintf(
									"%s/tools/%d",
									env.ServerPathPrefix, *props.Tool.Binding,
								) }
								title={ fmt.Sprintf("Zu %s %s navigieren",
									props.BoundTool.String(), props.BoundTool.Position.GermanString()) }
							>
								<i class="bi bi-box-arrow-up-right"></i>
								{ props.BoundTool.String() } { props.BoundTool.Type }
								<span class="text-xs muted">({ props.BoundTool.Position.GermanString() })</span>
							</a>
						</div>
					</div>
				}
			</div>
		</section>
		<section class="cycles">
			<div class="flex justify-between items-center mb">
				<h5>Pressennutzungsverlauf</h5>
				<button
					class="icon secondary small flex"
					hx-get={ fmt.Sprintf(
						"%s/htmx/tools/cycle/edit?tool_id=%d",
						env.ServerPathPrefix, props.Tool.ID,
					) }
					hx-trigger="click"
					hx-target="body"
					hx-swap="beforeend"
					hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
					title="Neuen Eintrag hinzufügen"
					if !props.User.IsAdmin() {
						disabled
					}
				>
					<i class="bi bi-plus-lg"></i>
				</button>
			</div>
			<div class="card compact warning my text-base">
				<div class="card-header">
					Entwicklernotiz
				</div>
				<div class="card-body text-sm">
					Eine bessere Hervorhebung der Regenerierungen wird hier bald hinzugefügt.
					<br/>
					Das "120x60 G05" ist momentan das einzige Werkzeug, bei dem ich schon eine Regenerierung verzeichnet habe.
				</div>
			</div>
			<section>
				<h6 class="mb">
					Gesamtzyklen für "{ fmt.Sprintf("%s %s %s",
    			props.Tool.Format.String(), props.Tool.Code, props.Tool.Type) }":
				</h6>
				<span>
					@components.TotalCycles(props.TotalCycles, true)
				</span>
			</section>
			<figure class="w-full overflow-x-scroll">
				<table name="tool-cycles-table" class="table borderless compact">
					<thead>
						<tr>
							<th name="press">Presse</th>
							<th name="date">Datum</th>
							<th name="total">Gesamtzyklen</th>
							<th name="partial">Teilzyklen (berechnet)</th>
							<th></th>
						</tr>
					</thead>
					<tbody>
						@toolCyclesTableRows(props)
					</tbody>
				</table>
			</figure>
		</section>
	</div>
}

templ toolCyclesTableRows(props *ToolCyclesProps) {
	if len(props.Cycles) == 0 {
		<tr>
			<td colspan="5" class="text-center">
				Kein Pressenverlauf verfügbar
			</td>
		</tr>
	} else {
		for _, cycle := range props.Cycles {
			@renderToolCycleRowWithPartialCalc(props, cycle)
		}
	}
}

templ renderToolCycleRowWithPartialCalc(props *ToolCyclesProps, cycle *models.Cycle) {
	<tr
		if props.LastRegeneration != nil && props.LastRegeneration.CycleID == cycle.ID {
			style="color: var(--ui-muted);"
		}
	>
		<td>
			<span>{ fmt.Sprintf("%d", cycle.PressNumber) }</span>
		</td>
		<td>
			<span class="text-sm">{ cycle.Date.Format("02.01.2006") }</span>
		</td>
		<td>
			{ fmt.Sprintf("%d", cycle.TotalCycles) }
		</td>
		<td>
			<span title="Berechnet: Gesamtzyklen - Gesamtzyklen des letzten Eintrags">
				{ fmt.Sprintf("%d", cycle.PartialCycles) }
			</span>
		</td>
		<td>
			<span class="button-group flex justify-end items-center">
				// HTMX Button: Goto: Edit cycle entry dialog
				<button
					class="icon small ghost"
					hx-get={ fmt.Sprintf(
						"%s/htmx/tools/cycle/edit?id=%d&tool_id=%d",
						env.ServerPathPrefix, cycle.ID, props.Tool.ID,
					) }
					hx-trigger="click"
					hx-target="body"
					hx-swap="beforeend"
					hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
					title="Bearbeiten"
					if !props.User.IsAdmin() {
						disabled
					}
				>
					<i class="bi bi-pencil"></i>
				</button>
				// HTMX Button: Delete cycle from database table and reload section.cycles
				<button
					class="icon destructive small ghost"
					hx-delete={ fmt.Sprintf(
						"%s/htmx/tools/cycle/delete?id=%d&tool_id=%d",
						env.ServerPathPrefix, cycle.ID, props.Tool.ID,
					) }
					hx-trigger="click"
					hx-target="section.cycles"
					hx-swap="innerHTML"
					hx-confirm={ fmt.Sprintf("Diesen Eintrag (%d Zyklen) löschen?", cycle.TotalCycles) }
					hx-on:htmx:response-error="alert(event.detail.xhr.responseText);"
					title="Löschen"
					if !props.User.IsAdmin() {
						disabled
					}
				>
					<i class="bi bi-trash"></i>
				</button>
			</span>
		</td>
	</tr>
}
