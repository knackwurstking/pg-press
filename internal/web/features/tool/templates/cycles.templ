package templates

import (
	"fmt"

	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/web/shared/components"
	"github.com/knackwurstking/pgpress/pkg/models"
)

type CyclesProps struct {
	User            *models.User
	Tool            *models.Tool
	ToolsForBinding []*models.Tool
	ToolPosition    string
	TotalCycles     int64
	Cycles          []*models.Cycle
	Regenerations   []*models.Regeneration
}

templ Cycles(props *CyclesProps) {
	<div class="flex flex-col gap">
		<h4>Werkzeugnutzung & Zyklen</h4>
		<section id="tool-status-section">
			<div class="flex justify-between items-center mb">
				<h5>Aktueller Status</h5>
			</div>
			@toolStatus(props.Tool, props.ToolsForBinding, props.User)
		</section>
		<section id="regenerations-section">
			<div class="flex justify-between items-center mb">
				<h5>Regerationen</h5>
			</div>
			if len(props.Regenerations) == 0 {
				<span class="flex justify-center items-center">
					<i><small>Keine Regenerationen verzeichnet für dieses Werkzeug</small></i>
				</span>
			} else {
				@regenerationsTable(props.Regenerations)
			}
		</section>
		<section id="cycles-section">
			<div class="flex justify-between items-center mb">
				<h5>Pressennutzungsverlauf</h5>
				<button
					class="icon secondary small flex"
					hx-get={ fmt.Sprintf(
						"%s/htmx/tools/cycle/edit?tool_id=%d",
						env.ServerPathPrefix, props.Tool.ID,
					) }
					hx-trigger="click"
					hx-target="body"
					hx-swap="beforeend"
					hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
					title="Neuen Eintrag hinzufügen"
					if !props.User.IsAdmin() {
						disabled
					}
				>
					<i class="bi bi-plus-lg"></i>
				</button>
			</div>
			<section>
				<h6 class="mb">
					Gesamtzyklen für "{ fmt.Sprintf("%s %s %s",
			    			props.Tool.Format.String(), props.Tool.Code, props.Tool.Type) }":
				</h6>
				<span>
					@components.TotalCycles(props.TotalCycles, true)
				</span>
			</section>
			@cyclesTable(props.Tool, props.Cycles, props.Regenerations, props.User)
		</section>
	</div>
}

templ toolStatus(tool *models.Tool, toolsForBinding []*models.Tool, user *models.User) {
	<div class="flex flex-col gap">
		<span class="flex gap-lg">
			// Show status and start or stop a regenaration
			@components.ToolStatusEdit(&components.ToolStatusEditProps{
				Tool:              tool,
				UserHasPermission: user.IsAdmin(),
			})
			// On active tools, link (button) to press page
			if tool.IsActive() {
				<a
					role="button"
					class="small ghost flex gap"
					href={ fmt.Sprintf(
					"%s/tools/press/%d",
					env.ServerPathPrefix, *tool.Press,
				) }
					title="Zur Pressenübersicht"
				>
					<i class="bi bi-arrow-right"></i>
					Presse { fmt.Sprintf("%d", *tool.Press) }
				</a>
			}
		</span>
		// (Un)Bind Top and TopCassette tools
		if len(toolsForBinding) > 0 {
			@BindingSection(tool, toolsForBinding, user.IsAdmin(), nil)
		}
	</div>
}

templ regenerationsTable(regenerations []*models.Regeneration) {
	// TODO: Adding a regenerations list somewhere
}

templ cyclesTable(tool *models.Tool, cycles []*models.Cycle, regenerations []*models.Regeneration, user *models.User) {
	<figure class="w-full overflow-x-scroll">
		<table name="tool-cycles-table" class="table borderless compact">
			<thead>
				<tr>
					<th name="press">Presse</th>
					<th name="date">Datum</th>
					<th name="total">Gesamtzyklen</th>
					<th name="partial">Teilzyklen (berechnet)</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				if len(cycles) == 0 {
					<tr>
						<td colspan="5" class="text-center">
							<i><small>Kein Pressenverlauf verfügbar</small></i>
						</td>
					</tr>
				} else {
					{{
						var lastRegeneration *models.Regeneration
						if len(regenerations) > 0 {
							lastRegeneration = regenerations[0]
						}
					}}
					for _, cycle := range cycles {
						@cycleRowWithPartialCalc(tool, cycle, lastRegeneration, user)
					}
				}
			</tbody>
		</table>
	</figure>
}

templ cycleRowWithPartialCalc(tool *models.Tool, cycle *models.Cycle, lastRegeneration *models.Regeneration, user *models.User) {
	<tr
		if lastRegeneration != nil && lastRegeneration.CycleID == cycle.ID {
			style="color: var(--ui-muted);"
		}
	>
		<td>
			<span>{ fmt.Sprintf("%d", cycle.PressNumber) }</span>
		</td>
		<td>
			<span class="text-sm">{ cycle.Date.Format("02.01.2006") }</span>
		</td>
		<td>
			{ fmt.Sprintf("%d", cycle.TotalCycles) }
		</td>
		<td>
			<span title="Berechnet: Gesamtzyklen - Gesamtzyklen des letzten Eintrags">
				{ fmt.Sprintf("%d", cycle.PartialCycles) }
			</span>
		</td>
		<td>
			<span class="button-group flex justify-end items-center">
				// HTMX Button: Goto: Edit cycle entry dialog
				<button
					class="icon small ghost"
					hx-get={ fmt.Sprintf(
						"%s/htmx/tools/cycle/edit?id=%d&tool_id=%d",
						env.ServerPathPrefix, cycle.ID, tool.ID,
					) }
					hx-trigger="click"
					hx-target="body"
					hx-swap="beforeend"
					hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
					title="Bearbeiten"
					if !user.IsAdmin() {
						disabled
					}
				>
					<i class="bi bi-pencil"></i>
				</button>
				// HTMX Button: Delete cycle from database table and reload section.cycles
				<button
					class="icon destructive small ghost"
					hx-delete={ fmt.Sprintf(
						"%s/htmx/tools/cycle/delete?id=%d&tool_id=%d",
						env.ServerPathPrefix, cycle.ID, tool.ID,
					) }
					hx-trigger="click"
					hx-target="section.cycles"
					hx-swap="innerHTML"
					hx-confirm={ fmt.Sprintf("Diesen Eintrag (%d Zyklen) löschen?", cycle.TotalCycles) }
					hx-on:htmx:response-error="alert(event.detail.xhr.responseText);"
					title="Löschen"
					if !user.IsAdmin() {
						disabled
					}
				>
					<i class="bi bi-trash"></i>
				</button>
			</span>
		</td>
	</tr>
}
