package templates

import (
	"fmt"
	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/web/shared/components"
	"github.com/knackwurstking/pgpress/pkg/models"
)

type BindingSectionProps struct {
	Tool            *models.ResolvedTool
	ToolsForBinding []*models.Tool
	IsAdmin         bool
	Error           error
}

templ BindingSection(props BindingSectionProps) {
	{{
		var positionForBinding models.Position
		if props.Tool.Position == models.PositionTop {
			positionForBinding = models.PositionTopCassette
		} else {
			positionForBinding = models.PositionTop
		}
	}}
	<span id="binding-section" class="flex flex-col gap">
		@components.SectionTitle(components.TitleLevelSub, "Werkzeuge Binden")
		<span
			class="flex gap flex-wrap"
			if !props.IsAdmin {
				disabled
			}
		>
			<select
				id="tool-binding-select"
				hx-patch={ fmt.Sprintf(
				"%s/htmx/tools/tool/%d/bind",
				env.ServerPathPrefix,
				props.Tool.ID,
			) }
				hx-vals="js:{target_id: event.target.value}"
				hx-trigger="change"
				hx-target="#binding-section"
				hx-swap="outerHTML"
				hx-on:htmx:response-error="alert(event.detail.xhr.responseText);"
				if props.Tool.Binding != nil {
					disabled
				}
			>
				<option
					value=""
					disabled
					selected?={ props.Tool.Binding == nil }
				>
					{ positionForBinding.GermanString() } Binden
				</option>
				// Render options, all top tools unbound
				for _, t := range props.ToolsForBinding {
					<option
						value={ t.ID }
						selected?={ props.Tool.Binding != nil && t.ID == *props.Tool.Binding }
					>{ t.Code } { t.Type }</option>
				}
			</select>
			<button
				class="small ghost destructive"
				hx-patch={ fmt.Sprintf(
				"%s/htmx/tools/tool/%d/unbind",
				env.ServerPathPrefix,
				props.Tool.ID,
			) }
				hx-trigger="click"
				hx-trigger="change"
				hx-target="#binding-section"
				hx-swap="outerHTML"
				hx-on:htmx:response-error="alert(event.detail.xhr.responseText);"
				if !props.Tool.IsBound() {
					disabled
				}
			>
				Entbinden
			</button>
		</span>
		if props.Tool.IsBound() {
			<span>
				@components.ToolAnchor(
					models.NewResolvedTool(props.Tool.GetBindingTool(),
						props.Tool.Tool, props.Tool.GetNotes()),
					nil,
				)
			</span>
		}
	</span>
}
