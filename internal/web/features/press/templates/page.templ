package templates

import (
	"fmt"

	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/web/shared/components"
	"github.com/knackwurstking/pgpress/internal/web/shared/layouts"
	"github.com/knackwurstking/pgpress/pkg/models"
)

type PageProps struct {
	Press models.PressNumber
}

templ Page(props PageProps) {
	@layouts.Main(
		layouts.MainOptions{
			PageTitle:   fmt.Sprintf("PG Presse | Werkzeuge Presse %d", props.Press),
			AppBarTitle: fmt.Sprintf("Werkzeug Presse %d", props.Press),
			NavContent:  navContent(),
		},
	) {
		<main class="container fluid">
			// Actions
			<section class="flex justify-end items-center gap">
				<a
					role="button"
					class="primary"
					href={ fmt.Sprintf("%s/tools/press/%d/umbau",
						env.ServerPathPrefix, props.Press) }
				>
					Umbau
				</a>
			</section>
			// Notes section
			<section id="notes-section" class="mt">
				<div class="flex justify-between items-center mb">
					<h5>Notizen</h5>
				</div>
				<div
					id="notes-content"
					hx-get={ fmt.Sprintf("%s/htmx/tools/press/%d/notes",
						env.ServerPathPrefix, props.Press) }
					hx-trigger="load, pageLoaded from:body"
					hx-on:htmx:response-error="alert('Fehler beim Laden der Notizen: ' + event.detail.xhr.responseText)"
				>
					@components.Spinner()
				</div>
			</section>
			<br/>
			// Aktive tools table
			<section id="tool-state-section" class="mt">
				<div class="flex justify-between items-center mb">
					<h5>Aktive Werkzeuge</h5>
				</div>
				<div
					id="active-tools-content"
					hx-get={ fmt.Sprintf("%s/htmx/tools/press/%d/active-tools",
						env.ServerPathPrefix, props.Press) }
					hx-trigger="load, pageLoaded from:body"
					hx-on:htmx:response-error="alert('Fehler beim Laden der Werkzeuge: ' + event.detail.xhr.responseText)"
				>
					@components.Spinner()
				</div>
			</section>
			<br/>
			<section id="metal-sheets-section">
				<div class="flex justify-between items-center mb">
					<h5>Blech Listen</h5>
				</div>
				<div
					id="metal-sheets-content"
					hx-get={ fmt.Sprintf("%s/htmx/tools/press/%d/metal-sheets",
						env.ServerPathPrefix, props.Press) }
					hx-trigger="load, pageLoaded from:body"
					hx-on:htmx:response-error="alert('Fehler beim Laden der Blech Listen: ' + event.detail.xhr.responseText)"
				>
					@components.Spinner()
				</div>
			</section>
			<br/>
			<!-- Press Cycles Table -->
			<section id="cycle-table-section" class="mt">
				<div class="flex justify-between items-center mb">
					<h5>Pressennutzungsverlauf</h5>
				</div>
				<div class="mx w-full flex justify-end align-center">
					<!-- Request a summary in PDF form from the server -->
					<button
						role="button"
						class="info"
						onclick={ templ.ComponentScript{
							Call: fmt.Sprintf(
								"downloadPDF('%s/htmx/tools/press/%d/cycle-summary-pdf')",
								env.ServerPathPrefix, props.Press),
						} }
					>Zusammenfassung (PDF)</button>
				</div>
				<div
					id="cycles-content"
					class="mt"
					hx-get={ fmt.Sprintf("%s/htmx/tools/press/%d/cycles",
						env.ServerPathPrefix, props.Press) }
					hx-trigger="load, pageLoaded from:body"
					hx-on:htmx:response-error="alert('Fehler beim Laden des Pressennutzungsverlaufs: ' + event.detail.xhr.responseText)"
				>
					@components.Spinner()
				</div>
			</section>
		</main>
		<script>
			async function downloadPDF(url) {
				try {
					// Show loading state
					const button = event.target;
					const originalText = button.textContent;
					button.textContent = 'LÃ¤dt...';
					button.disabled = true;

					// Fetch the PDF
					const response = await fetch(url);
					if (!response.ok) {
						throw new Error('PDF konnte nicht geladen werden');
					}

					// Get the blob
					const blob = await response.blob();

					// Create download link
					const downloadUrl = window.URL.createObjectURL(blob);
					const a = document.createElement('a');
					a.style.display = 'none';
					a.href = downloadUrl;

					// Get filename from response headers or use default
					const contentDisposition = response.headers.get('Content-Disposition');
					let filename = 'cycle_summary.pdf';
					if (contentDisposition) {
						const filenameMatch = contentDisposition.match(/filename="(.+)"/);
						if (filenameMatch) {
							filename = filenameMatch[1];
						}
					}
					a.download = filename;

					// Trigger download
					document.body.appendChild(a);
					a.click();

					// Cleanup
					window.URL.revokeObjectURL(downloadUrl);
					document.body.removeChild(a);

					// Reset button
					button.textContent = originalText;
					button.disabled = false;
				} catch (error) {
					console.error('Download failed:', error);
					alert('Fehler beim Download: ' + error.message);

					// Reset button
					const button = event.target;
					button.textContent = 'Zusammenfassung (PDF)';
					button.disabled = false;
				}
			}
		</script>
	}
}

templ navContent() {
	<div class="flex flex-row gap justify-end items-center">
		@components.NavFeedButton()
		@components.NavProfileButton()
		@components.NavHomeButton()
	</div>
}
