package templates

import (
	"fmt"

	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/web/shared/components"
	"github.com/knackwurstking/pgpress/pkg/models"
)

// PressNotesSection renders the notes section for all tools on a press
templ PressNotesSection(notes []*models.Note, tools []*models.Tool, press models.PressNumber) {
	if len(notes) > 0 {
		<h4>Notizen für Werkzeuge auf Presse { fmt.Sprintf("%d", press) }</h4>
		<div class="notes-list">
			for _, note := range notes {
				<div class="card">
					<div class="card-header">
						<span class="note-importance">
							switch note.Level {
								case models.INFO:
									<i class="bi bi-info-circle"></i>
									Info
								case models.ATTENTION:
									<i class="bi bi-exclamation-triangle text-warning"></i>
									<strong>Achtung</strong>
								case models.BROKEN:
									<i class="bi bi-x-circle text-danger"></i>
									<strong>Defekt</strong>
							}
						</span>
						<span class="note-date">
							{ note.CreatedAt.Format("2006-01-02 15:04") }
						</span>
					</div>
					<div class="card-body">
						<p>{ note.Content }</p>
						<div class="note-info mt-sm">
							<small class="text-muted">
								<i class="bi bi-gear"></i>
								Presse { fmt.Sprintf("%d", press) } Notiz
							</small>
						</div>
					</div>
				</div>
			}
		</div>
		<div class="flex justify-center mt">
			<button
				class="primary"
				hx-get={ fmt.Sprintf("%s/htmx/notes/edit?link_to_tables=press_%d", env.ServerPathPrefix, press) }
				hx-trigger="click"
				hx-target="body"
				hx-swap="beforeend"
				hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
				title="Neue Notiz für diese Presse hinzufügen"
			>
				<i class="bi bi-plus-lg"></i>
				Notiz hinzufügen
			</button>
		</div>
	} else {
		<div class="empty-state">
			<h4>Keine Notizen</h4>
			<p>Es gibt keine Notizen für Werkzeuge auf dieser Presse.</p>
			<button
				class="primary"
				hx-get={ fmt.Sprintf("%s/htmx/notes/edit?link_to_tables=press_%d", env.ServerPathPrefix, press) }
				hx-trigger="click"
				hx-target="body"
				hx-swap="beforeend"
				hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
				title="Neue Notiz für diese Presse hinzufügen"
			>
				<i class="bi bi-plus-lg"></i>
				Erste Notiz hinzufügen
			</button>
		</div>
	}
}

// PressActiveToolsSection renders the active tools section content for HTMX
templ PressActiveToolsSection(tools []*models.Tool, press models.PressNumber) {
	<div class="flex flex-col gap">
		if len(tools) == 0 {
			<div class="text-center text-muted">
				Keine aktiven Werkzeuge für diese Presse
			</div>
		} else {
			for _, tool := range tools {
				<a
					role="button"
					class="outline contrast flex justify-between items-center p"
					href={ fmt.Sprintf("%s/tools/tool/%d",
						env.ServerPathPrefix, tool.ID) }
				>
					<span class="flex flex-wrap flex-col gap-0 justify-start w-full">
						<span class="text-semibold">
							{ fmt.Sprintf("%s %s %s",
								tool.Format.String(), tool.Code, tool.Type) }
						</span>
						<span>
							@components.PositionBadge(
								tool.Position, "primary text-bold",
							)
						</span>
					</span>
					<i class="bi bi-chevron-right"></i>
				</a>
			}
		}
	</div>
}

// MetalSheetsSection renders the metal sheets section content for HTMX
templ MetalSheetsSection(metalSheets []*models.MetalSheet, toolsMap map[int64]*models.Tool, press models.PressNumber) {
	{{ expectedMachineType := models.GetMachineTypeForPress(press) }}
	<div class="flex flex-col gap-sm">
		<div class="text-center">
			<small class="text-muted">
				Zeigt nur Bleche für { expectedMachineType.DisplayName() }
				(Presse { fmt.Sprintf("%d", press) })
			</small>
		</div>
		@MetalSheetTablesCollapsible(metalSheets, toolsMap)
	</div>
}

// PressCyclesSection renders the cycles section content for HTMX
templ PressCyclesSection(cycles []*models.Cycle, toolsMap map[int64]*models.Tool, user *models.User, press models.PressNumber) {
	<figure class="w-full overflow-x-scroll">
		<table name="additional-cycles-table" class="table borderless compact">
			<thead>
				<tr>
					<th>Datum</th>
					<th>Werkzeug</th>
					<th>Position</th>
					<th>Gesamtzyklen</th>
					<th>Teilzyklen (berechnet)</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@renderPressCyclesRows(cycles, toolsMap, user)
			</tbody>
		</table>
	</figure>
}

// renderCyclesRows renders the cycle table rows
templ renderPressCyclesRows(cycles []*models.Cycle, toolsMap map[int64]*models.Tool, user *models.User) {
	if len(cycles) == 0 {
		<tr>
			<td colspan="6" class="text-center">
				Kein Pressenverlauf verfügbar
			</td>
		</tr>
	} else {
		for _, cycle := range cycles {
			@renderPressCycleRow(cycle, toolsMap, user)
		}
	}
}

// renderCycleRow renders a single cycle table row
templ renderPressCycleRow(cycle *models.Cycle, toolsMap map[int64]*models.Tool, user *models.User) {
	<tr>
		// Cycle Date
		<td>
			<span class="text-sm">{ cycle.Date.Format("02.01.2006") }</span>
		</td>
		// Cycle Tool
		<td>
			{{ tool, exists := toolsMap[cycle.ToolID] }}
			if exists && tool != nil {
				<span class="text-xs">
					{ fmt.Sprintf("%s %s %s",
						tool.Format.String(), tool.Code, tool.Type) }
				</span>
			} else {
				<span class="text-xs">{ fmt.Sprintf("%d", cycle.ToolID) }</span>
			}
		</td>
		// Cycle Position
		<td>
			<span class="text-xs">{ cycle.ToolPosition }</span>
		</td>
		// Total Cycles
		<td>
			{ fmt.Sprintf("%d", cycle.TotalCycles) }
		</td>
		// Partial Cycles
		<td>
			<span title="Berechnet: Gesamtzyklen - Gesamtzyklen des letzten Eintrags">
				{ fmt.Sprintf("%d", cycle.PartialCycles) }
			</span>
		</td>
		// Actions
		<td>
			<span class="button-group flex justify-end items-center">
				// HTMX Button: Edit cycle entry dialog
				<button
					class="small ghost"
					hx-get={ fmt.Sprintf(
						"%s/htmx/tools/cycle/edit?id=%d&tool_id=%d",
						env.ServerPathPrefix, cycle.ID, cycle.ToolID,
					) }
					hx-trigger="click"
					hx-target="body"
					hx-swap="beforeend"
					hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
					title="Bearbeiten"
					if !user.IsAdmin() {
						disabled
					}
				>
					<i class="bi bi-pencil"></i>
				</button>
				// HTMX Button: Delete cycle from database table and reload section
				<button
					class="destructive small ghost"
					hx-delete={ fmt.Sprintf(
						"%s/htmx/tools/cycle/delete?id=%d&tool_id=%d",
						env.ServerPathPrefix, cycle.ID, cycle.ToolID,
					) }
					hx-trigger="click"
					hx-swap="none"
					hx-confirm={ fmt.Sprintf("Diesen Eintrag (%d Zyklen) löschen?",
						cycle.TotalCycles) }
					hx-on:htmx:response-error="alert(event.detail.xhr.responseText);"
					hx-on:htmx:after-request="window.location.reload();"
					title="Löschen"
					if !user.IsAdmin() {
						disabled
					}
				>
					<i class="bi bi-trash"></i>
				</button>
			</span>
		</td>
	</tr>
}
