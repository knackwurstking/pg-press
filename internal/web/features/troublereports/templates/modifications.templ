package templates

import (
	"context"
	"fmt"
	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/pkg/models"
	"io"
)

// Individual modification entry with rollback functionality
// TODO: Mark current and disable rollback button
templ ModificationEntry(mod *models.Mod[models.TroubleReportModData], reportID int64, canRollback bool) {
	<div class="card seamless p mb">
		<div class="flex flex-col gap mb">
			<div class="flex gap-sm justify-between items-center">
				<span class="text-semibold">Modified by { mod.GetUserName() }</span>
				<span class="badge info text-xs">v{ fmt.Sprintf("%d", mod.Time) }</span>
			</div>
			<div class="flex gap-sm justify-between items-center">
				<span class="text-sm muted">{ mod.GetTimeString() }</span>
				if canRollback {
					@RollbackButton(reportID, mod.Time)
				}
			</div>
		</div>
		<div class="card muted p">
			<div class="flex flex-col gap">
				<div>
					<label class="block text-semibold mb-sm">Title:</label>
					<div class="card p-sm">{ mod.Data.Title }</div>
				</div>
				<div>
					<label class="block text-semibold mb-sm">Content:</label>
					<div class="card p-sm whitespace-pre-wrap max-h-40 overflow-y-auto">{ mod.Data.Content }</div>
				</div>
				<div>
					<label class="block text-semibold mb-sm">Attachments:</label>
					<div class="flex items-center">
						<span>{ fmt.Sprintf("%d", len(mod.Data.LinkedAttachments)) } attachment(s)</span>
						<svg width="16" height="16" style="margin-left: var(--ui-spacing);" class="muted" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path>
						</svg>
					</div>
				</div>
			</div>
		</div>
	</div>
}

// Rollback button component
templ RollbackButton(reportID int64, modificationTime int64) {
	<form
		hx-post={ templ.URL(fmt.Sprintf("%s/htmx/trouble-reports/rollback?id=%d",
			env.ServerPathPrefix, reportID)) }
		hx-swap="none"
		hx-on:htmx:after-request="
			if (event.detail.successful) {
				window.location.reload();
			}
		"
		class="inline"
	>
		<input type="hidden" name="modification_time" value={ fmt.Sprintf("%d", modificationTime) }/>
		<button
			type="submit"
			class="primary small"
			onclick="return confirm('Are you sure you want to rollback to this version? This will overwrite the current trouble report.')"
		>
			Rollback
		</button>
	</form>
}

// Render function factory that returns a templ.Component for use with modificationspage.Page
func CreateModificationRenderer(
	reportID int64, isAdmin bool,
) func(mod *models.Mod[models.TroubleReportModData], isCurrent bool) templ.Component {

	return func(mod *models.Mod[models.TroubleReportModData], isCurrent bool) templ.Component {

		return templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {
			canRollback := isAdmin

			if isCurrent {
				canRollback = false
			}

			// Render the modification entry
			entry := ModificationEntry(mod, reportID, canRollback)

			return entry.Render(ctx, w)
		})
	}
}
