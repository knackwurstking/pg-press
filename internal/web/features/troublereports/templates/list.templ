package templates

import (
	"fmt"

	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/web/shared/components"
	"github.com/knackwurstking/pgpress/pkg/models"
)

templ ListReports(user *models.User, troubleReports []*models.TroubleReportWithAttachments) {
	for _, tr := range troubleReports {
		<span class="trouble-report">
			<details
				id={ fmt.Sprintf("trouble-report-%d", tr.ID) }
				ontoggle={ updateURLHash(templ.JSExpression("event")) }
			>
				<summary>{ tr.Title }</summary>
				if tr.UseMarkdown {
					<div
						class="markdown-content"
						id={ fmt.Sprintf("markdown-content-%d", tr.ID) }
						data-markdown-content={ tr.Content }
					>
						Loading...
					</div>
				} else {
					<pre>{ tr.Content }</pre>
				}
				<!-- Attachments Preview Container -->
				if len(tr.LoadedAttachments) > 0 {
					<br/>
					<div
						class="attachments-preview-placeholder"
						data-trouble-report-id={ fmt.Sprintf("%d", tr.ID) }
						hx-get={ fmt.Sprintf(
							"%s/htmx/trouble-reports/attachments-preview?id=%d",
							env.ServerPathPrefix, tr.ID,
						) }
						hx-trigger="click"
						hx-swap="outerHTML"
						hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
					>
						<div class="attachments-preview-label">
							<i class="bi bi-paperclip"></i>
							Anhänge ({ len(tr.LoadedAttachments) }) - Klicken Sie hier, um zu laden...
						</div>
					</div>
				}
			</details>
			<div class="actions flex gap justify-end items-center">
				// GoTo: Modifications
				<a
					role="button"
					class="ghost secondary icon"
					href={ fmt.Sprintf(
						"%s/trouble-reports/modifications/%d",
						env.ServerPathPrefix, tr.ID,
					) }
				>
					<i class="bi bi-clock-history"></i>
				</a>
				// Edit Report Dialog
				<button
					hx-get={ fmt.Sprintf(
						"%s/htmx/trouble-reports/edit?id=%d",
						env.ServerPathPrefix, tr.ID,
					) }
					hx-trigger="click"
					hx-target="body"
					hx-swap="beforeend"
					hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
					class="ghost icon"
				>
					<i class="bi bi-pen"></i>
				</button>
				// Share Report (PDF)
				<button
					role="button"
					class="info ghost icon"
					title="Als PDF teilen"
					onclick={ components.DownloadTroubleReportPDF(
						fmt.Sprintf("%s/trouble-reports/share-pdf?id=%d",
							env.ServerPathPrefix, tr.ID)) }
				>
					<i class="bi bi-share"></i>
				</button>
				// Admin only: Delete Report
				<button
					hx-delete={ fmt.Sprintf(
						"%s/htmx/trouble-reports/data?id=%d",
						env.ServerPathPrefix, tr.ID,
					) }
					hx-trigger="click"
					hx-target="#data"
					hx-confirm="Sind Sie sicher, dass Sie diesen Fehlerbericht löschen möchten?"
					hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
					class="ghost destructive icon"
					if !user.IsAdmin() {
						disabled
					}
				>
					<i class="bi bi-trash"></i>
				</button>
			</div>
			<hr/>
		</span>
	}
	@renderMarkdownToHTML()
	@listReportsScript()
}

script updateURLHash(event templ.JSExpression) {
	var details = event.target;
	if (details.open) {
		// Update URL hash when details is opened
		history.replaceState(null, '', '#' + details.id);
	} else {
		// Clear hash when details is closed
		history.replaceState(null, '', window.location.pathname + window.location.search);
	}
}

script listReportsScript() {
	if (location.hash === "") {
		return;
	}

	var details = document.querySelector(location.hash);
	console.debug(location.hash, details)
	if (details) {
		details.open = true;
		setTimeout(() =>
			details.scrollIntoView({ behavior: 'smooth', block: 'start' }),
		100);
	}
}

script renderMarkdownToHTML() {
	window.renderMarkdownToHTML = function(content) {
		// First, process inline formatting and structural elements
		var processed = content
			.replace(/### (.*$)/gm, '<h3>$1</h3>')
			.replace(/## (.*$)/gm, '<h2>$1</h2>')
			.replace(/# (.*$)/gm, '<h1>$1</h1>')
			.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
			.replace(/\*(.*?)\*/g, '<em>$1</em>')
			.replace(/`(.*?)`/g, '<code>$1</code>')
			.replace(/^- (.*$)/gm, '<li class="ul-item">$1</li>')
			.replace(/^\d+\. (.*$)/gm, '<li class="ol-item">$1</li>')
			.replace(/(<li class="ul-item">[\s\S]*?<\/li>(?:\s*<li class="ul-item">[\s\S]*?<\/li>)*)/gm, '<ul>$1</ul>')
			.replace(/(<li class="ol-item">[\s\S]*?<\/li>(?:\s*<li class="ol-item">[\s\S]*?<\/li>)*)/gm, '<ol>$1</ol>')
			.replace(/class="[uo]l-item"/g, '');

		// Split content by double newlines to create paragraphs
		var paragraphs = processed.split(/\n\s*\n/);

		return paragraphs.map(function(paragraph) {
			paragraph = paragraph.trim();
			if (!paragraph) return '';

			// Skip if it's already an HTML block element
			if (paragraph.match(/^<(h[1-6]|ul|ol|li|div|blockquote|pre)/)) {
				return paragraph;
			}

			// Convert single newlines to line breaks within paragraphs
			var withLineBreaks = paragraph.replace(/\n/g, '<br>');

			// Wrap in paragraph tags if it's not already a block element
			return '<p>' + withLineBreaks + '</p>';
		}).join('\n\n');
	};

	// Function to process markdown content from data attributes
	window.processMarkdownContent = function() {
		var containers = document.querySelectorAll('.markdown-content[data-markdown-content]');
		containers.forEach(function(container) {
			var content = container.getAttribute('data-markdown-content');
			if (content && window.renderMarkdownToHTML) {
				container.innerHTML = window.renderMarkdownToHTML(content);
			} else if (content) {
				container.innerHTML = '<pre>' + content + '</pre>';
			}
		});
	};

	// Process immediately
	setTimeout(window.processMarkdownContent, 10);

	// Listen for HTMX afterSwap events to re-process markdown
	document.addEventListener('htmx:afterSwap', function(event) {
		setTimeout(window.processMarkdownContent, 50);
	});

	// Listen for troubleReportSaved event from dialog to trigger data refresh
	window.addEventListener('troubleReportSaved', function() {
		document.body.dispatchEvent(new CustomEvent('pageLoaded'));
	});
}
