package templates

import (
	"fmt"
	"strconv"

	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/web/shared/components"
	"github.com/knackwurstking/pgpress/internal/web/shared/layouts"
	"github.com/knackwurstking/pgpress/pkg/models"
)

type EditorOptions struct {
	Type        string
	ID          int64
	ReturnURL   string
	Title       string
	Content     string
	UseMarkdown bool
	Attachments []*models.Attachment
}

templ EditorPage(options *EditorOptions) {
	@layouts.Main(layouts.MainOptions{
		PageTitle:      getPageTitle(options),
		AppBarTitle:    getEditorTitle(options),
		AdditionalHead: editorStyles(),
		NavContent:     navContent(options),
	}) {
		<main class="container fluid">
			<div class="editor-container">
				<form
					class="editor-form flex flex-col gap px"
					method="POST"
					action={ templ.URL(fmt.Sprintf("%s/editor/save", env.ServerPathPrefix)) }
					enctype="multipart/form-data"
				>
					<!-- Hidden fields -->
					<input type="hidden" name="type" value={ options.Type }/>
					<input type="hidden" name="id" value={ strconv.FormatInt(options.ID, 10) }/>
					<input type="hidden" name="return_url" value={ options.ReturnURL }/>
					<input type="hidden" name="existing_attachments_removal" id="existing-attachments-removal" value=""/>
					<!-- Title Input -->
					<div class="flex flex-col gap-sm w-full">
						<label for="title" class="text-sm text-medium">Titel</label>
						<input
							type="text"
							name="title"
							id="title"
							class="w-full"
							placeholder="Titel eingeben..."
							value={ options.Title }
							required
						/>
					</div>
					<!-- Markdown Toggle -->
					<div class="my">
						<div class="p border muted cursor-pointer transition-all" style="border-radius: var(--ui-radius);">
							<label for="use_markdown" class="flex gap items-center cursor-pointer">
								<input
									type="checkbox"
									name="use_markdown"
									id="use_markdown"
									onchange="toggleMarkdownFeatures()"
									if options.UseMarkdown {
										checked
									}
								/>
								<span class="text-medium">Markdown-Formatierung verwenden</span>
								<small class="muted text-sm italic ml-auto">
									(unterstÃ¼tzt **fett**, *kursiv*, # Ãœberschriften, > Zitate, automatische ZeilenumbrÃ¼che, etc.)
								</small>
							</label>
						</div>
					</div>
					<!-- Markdown Tools -->
					<div id="markdown-tools" class="border p my transition-all" style="display: none; border-radius: var(--ui-radius);">
						<div class="mb text-sm text-semibold">
							<span>Markdown-Werkzeuge</span>
						</div>
						<div class="flex gap-sm flex-wrap">
							<button type="button" class="icon secondary small" onclick="insertMarkdown('**', '**')" title="Fett">
								<i class="bi bi-type-bold"></i>
							</button>
							<button type="button" class="icon secondary small" onclick="insertMarkdown('*', '*')" title="Kursiv">
								<i class="bi bi-type-italic"></i>
							</button>
							<button type="button" class="icon secondary small" onclick="insertMarkdown('__', '__')" title="Unterstrichen">
								<i class="bi bi-type-underline"></i>
							</button>
							<button type="button" class="icon secondary small" onclick="insertMarkdown('# ', '')" title="Ãœberschrift">
								<i class="bi bi-type-h1"></i>
							</button>
							<button type="button" class="icon secondary small" onclick="insertMarkdown('> ', '')" title="Zitat">
								<i class="bi bi-quote"></i>
							</button>
							<button type="button" class="icon secondary small" onclick="insertMarkdown('`', '`')" title="Code">
								<i class="bi bi-code"></i>
							</button>
							<button type="button" class="icon secondary small" onclick="insertMarkdown('- ', '')" title="Liste">
								<i class="bi bi-list-ul"></i>
							</button>
						</div>
					</div>
					<!-- Content Textarea -->
					<div class="flex flex-col gap-sm">
						<label for="content" class="text-sm text-medium">Inhalt</label>
						<div class="flex flex-col gap">
							<textarea
								name="content"
								id="content"
								class="w-full resize-y"
								placeholder="Inhalt eingeben..."
								required
								rows="15"
								style="font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace; min-height: 400px;"
							>{ options.Content }</textarea>
							<!-- Markdown Preview -->
						</div>
					</div>
					<!-- Markdown Preview -->
					<div id="markdown-preview-container" class="my transition-all" style="display: none;">
						<div id="markdown-preview" class="border flex flex-col overflow-hidden" style="height: 400px; border-radius: var(--ui-radius);">
							<div class="px py-sm border-bottom muted flex justify-between items-center text-semibold text-sm">
								<span>Live-Vorschau</span>
								<button type="button" class="secondary small flex gap-sm items-center" onclick="togglePreviewMode()">
									<i class="bi bi-arrows-angle-expand"></i>
									<span id="preview-toggle-text">Vollbild</span>
								</button>
							</div>
							<div id="preview-content" class="p flex-1 overflow-y-auto markdown-content"></div>
						</div>
					</div>
					<!-- Separator between preview and attachments -->
					<div class="my-lg relative flex items-center justify-center">
						<hr class="w-full"/>
						<div class="absolute px text-lg" style="background: var(--ui-bg);">ðŸ“Ž</div>
					</div>
					if supportsAttachments(options.Type) {
						<!-- Attachments Section -->
						<div class="border-2 p-lg muted mt transition-all" style="border-radius: var(--ui-radius);">
							<div class="mb">
								<h3 class="text-lg text-semibold primary ghost flex gap-sm items-center mb">
									<i class="bi bi-paperclip"></i>
									Dateien & AnhÃ¤nge
								</h3>
								<div class="p border-left primary text-sm text-medium muted" style="border-left-width: 4px;">
									Bilder (max. 10MB pro Datei, max. 10 Dateien)
								</div>
							</div>
							if len(options.Attachments) > 0 {
								<!-- Existing Attachments -->
								<details class="border mb" style="border-radius: var(--ui-radius);">
									<summary class="p cursor-pointer text-medium flex gap items-center">
										<i class="bi bi-images"></i>
										Vorhandene Bilder ({ len(options.Attachments) })
									</summary>
									<div id="existing-attachments" class="flex flex-col gap mt">
										for attachmentIndex, attachment := range options.Attachments {
											<div
												class="p border flex gap justify-between items-center"
												data-id={ fmt.Sprintf("%d", attachment.GetID()) }
												style="border-radius: var(--ui-radius);"
											>
												<div class="flex gap items-center">
													<span class="text-medium">Anhang { attachmentIndex+1 }</span>
													<span class="muted text-sm">({ attachment.GetMimeType() })</span>
												</div>
												<div class="flex gap-sm">
													<button
														type="button"
														class="secondary small"
														onclick={ layouts.OpenImageViewer(attachment.GetID()) }
													>
														<i class="bi bi-eye"></i>
														Anzeigen
													</button>
													<button
														type="button"
														class="destructive small"
														onclick={ deleteAttachment(attachment.GetID()) }
													>
														<i class="bi bi-trash"></i>
														LÃ¶schen
													</button>
												</div>
											</div>
										}
									</div>
								</details>
							}
							<!-- File Upload Area -->
							<div
								class="border-2 border-dashed p-xl text-center cursor-pointer transition-all mb"
								onclick='document.getElementById("attachments").click();'
								ondrop="handleFileDrop(event)"
								ondragover="handleDragOver(event)"
								ondragleave="handleDragLeave(event)"
								style="border-radius: var(--ui-radius);"
							>
								<i class="bi bi-cloud-upload text-2xl mb-sm"></i>
								<div class="text-medium mb-sm">Bilder hochladen</div>
								<div class="text-sm opacity-75">Klicken oder Dateien hierher ziehen</div>
								<input
									type="file"
									name="attachments"
									id="attachments"
									multiple
									accept="image/*"
									onchange="onAttachments(event)"
									class="hidden"
								/>
							</div>
							<!-- File Preview Area -->
							<div id="file-preview" class="border p" style="display: none; border-radius: var(--ui-radius);">
								<div class="mb text-medium">
									<span>Neue Bilder:</span>
								</div>
								<div id="new-attachments" class="flex flex-col gap"></div>
								<template name="attachment-item">
									<div class="p border flex gap justify-between items-center" style="border-radius: var(--ui-radius);">
										<div class="flex gap items-center">
											<span class="attachment-name name text-medium"></span>
											<span class="attachment-size size-text text-sm muted"></span>
										</div>
										<div>
											<button
												type="button"
												class="delete destructive small"
											>
												<i class="bi bi-trash"></i>
												Entfernen
											</button>
										</div>
									</div>
								</template>
							</div>
						</div>
					}
					<!-- Form Actions -->
					<div class="mt-lg pt border-top flex gap justify-end">
						if options.ReturnURL != "" {
							<a
								role="button"
								href={ templ.URL(options.ReturnURL) }
								class="secondary flex gap-sm items-center"
							>
								<i class="bi bi-x-circle"></i>
								Abbrechen
							</a>
						}
						<button type="submit" class="primary flex gap-sm items-center">
							if options.ID > 0 {
								<i class="bi bi-check-circle"></i>
								Aktualisieren
							} else {
								<i class="bi bi-plus-circle"></i>
								Erstellen
							}
						</button>
					</div>
				</form>
			</div>
		</main>
		@components.MarkdownScript()
		@editorStyles()
		@editorScripts()
	}
}

templ navContent(options *EditorOptions) {
	<div class="flex flex-row gap justify-end items-center">
		if options.ReturnURL != "" {
			<a href={ templ.URL(options.ReturnURL) } class="secondary flex gap">
				<i class="bi bi-arrow-left"></i>
				ZurÃ¼ck
			</a>
		}
	</div>
}

templ editorStyles() {
	@components.MarkdownStyles()
	<style>
        /* Essential custom styles */
        .markdown-content h1,
        .markdown-content h2,
        .markdown-content h3,
        .markdown-content h4,
        .markdown-content h5,
        .markdown-content h6 {
            margin: 0.8em 0 0.4em 0;
            font-weight: bold;
            line-height: 1.3;
        }

        .markdown-content h1 { font-size: 1.4em; }
        .markdown-content h2 { font-size: 1.2em; }
        .markdown-content h3 { font-size: 1.1em; }

        .markdown-content p {
            margin: 0.5em 0 1em 0;
        }

        .markdown-content ul,
        .markdown-content ol {
            margin: 0.5em 0;
            padding-left: 1.5em;
            list-style: inherit;
        }

        .markdown-content ul {
            list-style-type: disc;
        }

        .markdown-content ol {
            list-style-type: decimal;
        }

        .markdown-content li {
            margin: 0.25em 0;
            display: list-item;
        }

        .markdown-content code {
            font-size: 0.85em;
            padding: 0.125em 0.25em;
            border-radius: 2px;
        }

        .markdown-content strong {
            font-weight: 600;
        }

        .markdown-content em {
            font-style: italic;
        }

        /* Responsive design */
        @media (max-width: 768px) {
            #markdown-preview {
                min-height: 200px;
            }

            .flex-wrap {
                justify-content: center;
            }
        }

        /* Custom hover states */
        .transition-all:hover {
            border-color: var(--ui-primary);
        }

        .border-2:hover {
            border-color: var(--ui-primary);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        /* File upload hover states */
        .file-upload-area:hover {
            border-color: var(--ui-primary);
        }

        .file-upload-area.drag-over {
            border-color: var(--ui-primary);
        }

        /* Preview fullscreen mode */
        .preview-fullscreen textarea {
            display: none;
        }

        .preview-fullscreen #markdown-preview {
            min-height: 600px;
        }
    </style>
}

templ editorScripts() {
	<script>
        // Global variables
        var selectedFiles = [];
        var existingAttachmentsRemoval = [];
        var isPreviewFullscreen = false;

        // Initialize editor when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeMarkdownFeatures();
        });

        function initializeMarkdownFeatures() {
            var checkbox = document.getElementById('use_markdown');
            if (checkbox) {
                toggleMarkdownFeatures();
            }
        }

        function toggleMarkdownFeatures() {
            var checkbox = document.getElementById('use_markdown');
            var tools = document.getElementById('markdown-tools');
            var previewContainer = document.getElementById('markdown-preview-container');
            var textarea = document.getElementById('content');

            if (checkbox.checked) {
                tools.style.display = 'block';
                previewContainer.style.display = 'block';
                textarea.setAttribute('placeholder', 'Inhalt (Markdown-Formatierung aktiviert)');
                updatePreview();

                // Add real-time preview updates
                textarea.addEventListener('input', updatePreview);
            } else {
                tools.style.display = 'none';
                previewContainer.style.display = 'none';
                textarea.removeEventListener('input', updatePreview);
                textarea.setAttribute('placeholder', 'Inhalt');
            }
        }



        function updatePreview() {
            window.updateMarkdownPreview('content', 'preview-content');
        }

        function togglePreviewMode() {
            var container = document.querySelector('.editor-container');
            var toggleText = document.getElementById('preview-toggle-text');
            var toggleIcon = document.querySelector('.preview-toggle i');

            isPreviewFullscreen = !isPreviewFullscreen;

            if (isPreviewFullscreen) {
                container.classList.add('preview-fullscreen');
                toggleText.textContent = 'Split';
                toggleIcon.className = 'bi bi-arrows-angle-contract';
            } else {
                container.classList.remove('preview-fullscreen');
                toggleText.textContent = 'Vollbild';
                toggleIcon.className = 'bi bi-arrows-angle-expand';
            }
        }

        function insertMarkdown(before, after) {
            var textarea = document.getElementById('content');
            if (!textarea) return;

            var start = textarea.selectionStart;
            var end = textarea.selectionEnd;
            var selectedText = textarea.value.substring(start, end);
            var newText = before + selectedText + after;

            textarea.value = textarea.value.substring(0, start) + newText + textarea.value.substring(end);

            // Set cursor position
            var newPos = start + before.length + selectedText.length + after.length;
            if (selectedText === '') {
                newPos = start + before.length;
            }

            textarea.focus();
            textarea.setSelectionRange(newPos, newPos);

            // Update preview
            updatePreview();
        }

        function updateExistingAttachmentsRemoval() {
            var input = document.getElementById('existing-attachments-removal');
            if (input) {
                input.value = existingAttachmentsRemoval.join(',');
            }
        }

        function onAttachments(event) {
            selectedFiles = Array.from(event.target.files);

            function formatFileSize(bytes) {
                if (bytes === 0) return "0 Bytes";
                var k = 1024;
                var sizes = ["Bytes", "KB", "MB", "GB"];
                var i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
            }

            var previewArea = document.getElementById("file-preview");
            var container = document.getElementById("new-attachments");

            if (!previewArea || !container) return;

            container.innerHTML = "";

            if (selectedFiles.length > 0) {
                previewArea.style.display = "block";

                selectedFiles.forEach((file, index) => {
                    var sizeClass = file.size > 10 * 1024 * 1024 ? "attachment-error text-red" : "muted text-sm";
                    var sizeText = file.size > 10 * 1024 * 1024 ? "ZU GROSS!" : formatFileSize(file.size);

                    var template = previewArea.querySelector('template[name="attachment-item"]');
                    if (!template) return;

                    var item = template.content.cloneNode(true);

                    var nameElement = item.querySelector('.name');
                    if (nameElement) nameElement.textContent = file.name;

                    var sizeElement = item.querySelector('.size-text');
                    if (sizeElement) {
                        sizeElement.textContent = sizeText;
                        sizeElement.className += ' ' + sizeClass;
                    }

                    var deleteBtn = item.querySelector('button.delete');
                    if (deleteBtn) {
                        deleteBtn.onclick = () => {
                            selectedFiles.splice(index, 1);

                            // Update the file input
                            var fileInput = document.getElementById("attachments");
                            var dt = new DataTransfer();
                            selectedFiles.forEach((file) => dt.items.add(file));
                            fileInput.files = dt.files;

                            onAttachments(event);
                        };
                    }

                    container.appendChild(item);
                });

                setTimeout(() => {
                    previewArea.scrollIntoView({behavior: "smooth", block: "start"});
                }, 100);
            } else {
                previewArea.style.display = "none";
            }
        }

        // Drag and drop functionality
        function handleDragOver(event) {
            event.preventDefault();
            event.currentTarget.classList.add('drag-over');
        }

        function handleDragLeave(event) {
            event.preventDefault();
            event.currentTarget.classList.remove('drag-over');
        }

        function handleFileDrop(event) {
            event.preventDefault();
            event.currentTarget.classList.remove('drag-over');

            var files = event.dataTransfer.files;
            if (files.length > 0) {
                var fileInput = document.getElementById('attachments');
                if (fileInput) {
                    fileInput.files = files;
                    onAttachments({ target: fileInput });
                }
            }
        }

        // Delete attachment function (for existing attachments)
        function deleteAttachment(attachmentId) {
            if (!confirm("Sind Sie sicher, dass Sie diesen Anhang lÃ¶schen mÃ¶chten?")) {
                return;
            }

            var attachmentItem = document.querySelector(
                '#existing-attachments .attachment-item[data-id="' + attachmentId + '"]'
            );

            if (attachmentItem) {
                attachmentItem.remove();
                existingAttachmentsRemoval.push(attachmentId);
                updateExistingAttachmentsRemoval();

                var existingAttachments = document.getElementById('existing-attachments');
                if (existingAttachments && existingAttachments.children.length === 0) {
                    var detailsSection = existingAttachments.closest('details');
                    if (detailsSection) {
                        detailsSection.style.display = 'none';
                    }
                }
            }
        }
    </script>
}

// Helper functions
func getPageTitle(options *EditorOptions) string {
	if options.ID > 0 {
		return fmt.Sprintf("Bearbeiten - %s", getTypeName(options.Type))
	}
	return fmt.Sprintf("Erstellen - %s", getTypeName(options.Type))
}

func getEditorTitle(options *EditorOptions) string {
	if options.ID > 0 {
		return fmt.Sprintf("%s bearbeiten", getTypeName(options.Type))
	}
	return fmt.Sprintf("Neues %s erstellen", getTypeName(options.Type))
}

func getTypeName(editorType string) string {
	switch editorType {
	case "troublereport":
		return "Problembericht"
	default:
		return "Dokument"
	}
}

func supportsAttachments(editorType string) bool {
	switch editorType {
	case "troublereport":
		return true
	default:
		return false
	}
}

script deleteAttachment(attachmentId int64) {
    deleteAttachment(attachmentId);
}
