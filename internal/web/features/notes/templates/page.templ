package templates

// Notes Management Implementation:
//
// This page provides comprehensive notes management for the PG Press system:
// - Create, edit, and delete notes with priority levels (INFO, ATTENTION, BROKEN)
// - Link notes to specific entities using generic "linked" field
// - Filter notes by priority level with live JavaScript filtering
// - Display linked entities with direct links where applicable
// - Automatic sorting: BROKEN notes first, then ATTENTION, then INFO, newest first
// - Real-time updates via HTMX triggers after note operations
//
// Notes can be linked to any entity using the format "type_id":
// - Individual tools: "tool_123" - note appears only for that tool
// - Entire presses: "press_5" - note is specific to that press
// - Or any other entity type as needed
//
// The linking system uses a simple string field for maximum flexibility.

import (
	"fmt"

	"github.com/knackwurstking/pgpress/internal/web/shared/components"
	"github.com/knackwurstking/pgpress/internal/web/shared/layouts"
	"github.com/knackwurstking/pgpress/pkg/models"
)

type PageProps struct {
	Notes []*models.Note
	Tools []*models.Tool
}

templ Page(props *PageProps) {
	@layouts.Main(
		layouts.MainOptions{
			PageTitle:   "PG Presse | Notizen Verwaltung",
			AppBarTitle: "Notizen Verwaltung",
			NavContent:  navContent(),
		},
	) {
		<main class="container fluid">
			<!-- Actions Section -->
			<section class="flex justify-between items-center mb">
				<h2>Alle Notizen ({ fmt.Sprintf("%d", len(props.Notes)) })</h2>
			</section>
			<!-- Filter Section -->
			<section class="filter-section mb">
				<div class="flex gap justify-center items-center">
					<button class="filter-btn active small" data-filter="all">
						Alle ({ fmt.Sprintf("%d", len(props.Notes)) })
					</button>
					{{ brokenCount := 0 }}
					{{ attentionCount := 0 }}
					{{ infoCount := 0 }}
					{{
						for _, note := range props.Notes {
							switch note.Level {
							case models.BROKEN:
								brokenCount++
							case models.ATTENTION:
								attentionCount++
							case models.INFO:
								infoCount++
							}
						}
					}}
					<button class="filter-btn small destructive flex gap-sm" data-filter="broken">
						<i class="bi bi-x-circle text-danger"></i>
						Defekt ({ fmt.Sprintf("%d", brokenCount) })
					</button>
					<button class="filter-btn small warning flex gap-sm" data-filter="attention">
						<i class="bi bi-exclamation-triangle text-warning"></i>
						Achtung ({ fmt.Sprintf("%d", attentionCount) })
					</button>
					<button class="filter-btn small info flex gap-sm" data-filter="info">
						<i class="bi bi-info-circle"></i>
						Info ({ fmt.Sprintf("%d", infoCount) })
					</button>
				</div>
			</section>
			<!-- Notes List -->
			<section class="notes-grid">
				@NotesGrid(props.Tools, props.Notes)
			</section>
		</main>
		<!-- JavaScript for filtering -->
		<script>
			document.addEventListener('DOMContentLoaded', function() {
				const filterButtons = document.querySelectorAll('.filter-btn');
				const noteCards = document.querySelectorAll('.note-card');

				filterButtons.forEach(button => {
					button.addEventListener('click', function() {
						const filter = this.dataset.filter;

						// Update active button
						filterButtons.forEach(btn => btn.classList.remove('active'));
						this.classList.add('active');

						// Show/hide cards based on filter
						noteCards.forEach(card => {
							const level = card.dataset.noteLevel;
							const shouldShow = filter === 'all' ||
								(filter === 'broken' && level === '2') ||
								(filter === 'attention' && level === '1') ||
								(filter === 'info' && level === '0');

							if (shouldShow) {
								card.style.display = 'block';
							} else {
								card.style.display = 'none';
							}
						});
					});
				});
			});
		</script>
		<!-- CSS for notes page -->
		<style>
			.notes-grid {
				max-width: 100%;
				margin: 0 auto;
			}

			.notes-list {
				display: flex;
				flex-wrap: wrap;
				gap: 1rem;
				justify-content: flex-start;
			}

			.note-card {
				border-left: 4px solid;
				transition: all 0.2s ease;
				width: fit-content;
				max-width: 500px;
			}

			.note-card.broken {
				border-left-color: var(--color-danger, #dc3545);
			}

			.note-card.attention {
				border-left-color: var(--color-warning, #ffc107);
			}

			.note-card.info {
				border-left-color: var(--color-info, #0dcaf0);
			}

			.note-card:hover {
				transform: translateY(-2px);
				box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
			}

			.note-importance {
				display: flex;
				align-items: center;
				gap: 0.5rem;
			}

			.note-actions {
				display: flex;
				align-items: center;
			}

			.linked-info .tool-link,
			.linked-info .press-link {
				color: var(--primary-color, #0d6efd);
				text-decoration: none;
			}

			.linked-info .tool-link:hover {
				text-decoration: underline;
			}

			.empty-state {
				padding: 3rem 1rem;
			}

			.note-content {
				white-space: pre-wrap;
				word-wrap: break-word;
			}
		</style>
	}
}

templ navContent() {
	<div class="flex flex-row gap justify-end items-center">
		@components.NavFeedButton()
		@components.NavProfileButton()
		@components.NavHomeButton()
	</div>
}
