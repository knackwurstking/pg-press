package troublereports

import (
	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/web/constants"
	"github.com/knackwurstking/pgpress/internal/web/templates/components"
	"github.com/knackwurstking/pgpress/internal/web/templates/layouts"
)

templ Page() {
	@layouts.Main(
		layouts.MainOptions{
			PageTitle:      "PG Presse | Problemberichte",
			AppBarTitle:    "Problemberichte",
			AdditionalHead: additionalHead(),
			NavContent:     navContent(),
		},
	) {
		<main class="container fluid">
			<!-- Search Bar -->
			<section style="margin-top: 0" class="flex flex-row gap justify-between">
				<input
					style="margin: auto 0; width: 100%"
					type="search"
					name="search"
					placeholder="Suche"
					aria-label="Suche"
					oninput="window.search(event)"
				/>
			</section>

			<!-- Page Actions: Create -->
			<section style="margin-top: 0" class="flex flex-row gap justify-end">
				<button
					hx-get={ env.ServerPathPrefix + "/htmx/trouble-reports/dialog-edit" }
					hx-trigger="click"
					hx-target="body"
					hx-swap="beforeend"
					hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
					class="flex flex-row gap justify-between items-center"
				>
					<i class="bi bi-plus-lg"></i>
					Erstellen
				</button>
			</section>

			<!-- Trouble Reports Entries -->
			<section>
				<span
					hx-get={ env.ServerPathPrefix + "/htmx/trouble-reports/data" }
					hx-trigger="load"
					hx-swap="outerHTML"
					hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
					id={ constants.IDData }
				></span>
			</section>
		</main>
	}
}

templ navContent() {
	<div class="flex flex-row gap justify-end items-center">
		@components.NavFeedButton()
		@components.NavProfileButton()
		@components.NavHomeButton()
	</div>
}

templ additionalHead() {
	<link rel="stylesheet" href={ env.ServerPathPrefix + "/css/trouble-reports/dialog-edit.css" }/>
	<link rel="stylesheet" href={ env.ServerPathPrefix + "/css/trouble-reports/data.css" }/>

	<script>
    	// Initialize search timer variable
    	var searchTimer;

    	// Search function with debouncing and client-side filtering
    	function search(event) {
    		var searchValue = event.target.value.toLowerCase().trim();

    		// Clear existing timer
    		clearTimeout(searchTimer);

    		// Set new timer for lazy search (300ms delay)
    		searchTimer = setTimeout(function() {
    			// Split search value on spaces to get individual search terms
    			var searchTerms = searchValue.split(/\s+/).filter(function(term) {
    				return term.length > 0;
    			});

    			// Get all trouble report elements
    			var troubleReports = document.querySelectorAll('span.trouble-report');

    			for (var i = 0; i < troubleReports.length; i++) {
    				var report = troubleReports[i];
    				if (searchTerms.length === 0) {
    					// Show all if search is empty
    					report.style.display = '';
    				} else {
    					// Get the text content from the summary and pre elements
    					var summary = report.querySelector('summary');
    					var content = report.querySelector('pre');

    					var summaryText = summary ? summary.textContent.toLowerCase() : '';
    					var contentText = content ? content.textContent.toLowerCase() : '';
    					var combinedText = summaryText + ' ' + contentText;

    					// Check if ALL search terms are found in either summary or content
    					var allTermsFound = true;
    					for (var j = 0; j < searchTerms.length; j++) {
    						if (!combinedText.includes(searchTerms[j])) {
    							allTermsFound = false;
    							break;
    						}
    					}

    					if (allTermsFound) {
    						report.style.display = '';
    					} else {
    						report.style.display = 'none';
    					}
    				}
    			}
    		}, 300);
    	}

    	// Clear timer on page unload to prevent memory leaks
    	window.addEventListener('beforeunload', function() {
    		clearTimeout(searchTimer);
    	});

    	// Make search function available globally
    	window.search = search;
	</script>
}
