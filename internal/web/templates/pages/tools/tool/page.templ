package tooltoolpage

import (
	"fmt"

	"github.com/knackwurstking/pgpress/internal/database/models"
	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/web/constants"
	"github.com/knackwurstking/pgpress/internal/web/templates/components"
	"github.com/knackwurstking/pgpress/internal/web/templates/layouts"
)

templ ToolPage(user *models.User, tool *models.ToolWithNotes, metalSheets []*models.MetalSheet) {
	{{
		var slotName string
		switch tool.Position {
		case models.PositionTop:
			slotName = constants.QueryParamSlotTop
		case models.PositionTopCassette:
			slotName = constants.QueryParamSlotTopCassette
		case models.PositionBottom:
			slotName = constants.QueryParamSlotBottom
		}
	}}
	@layouts.Main(
		layouts.MainOptions{
			PageTitle:   fmt.Sprintf("PG Presse | %s", tool.String()),
			AppBarTitle: tool.String(),
			NavContent:  toolsPageNavContent(),
		},
	) {
		<main class="container fluid flex flex-col gap">
			<div class="dev-note card warning mb">
				<div class="card-header">
					<h4>
						<i class="bi bi-exclamation-triangle mr"></i>
						<span>In Bearbeitung</span>
					</h4>
				</div>
			</div>
			@toolPageActions(user, tool)
			@toolPageNotes(tool)
			if tool.Position == models.PositionTop || tool.Position == models.PositionBottom {
				@toolPageMetalSheets(user, metalSheets, tool, slotName)
			}
			@toolPageCylesList(tool, slotName)
		</main>
	}
}

templ toolPageActions(user *models.User, tool *models.ToolWithNotes) {
	<div class="action-bar flex gap justify-end items-center">
		<button
			hx-get={ fmt.Sprintf(
				"%s/htmx/tools/edit?id=%d",
				env.ServerPathPrefix, tool.ID,
			) }
			hx-trigger="click"
			hx-target="body"
			hx-swap="beforeend"
			hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
			class="primary flex gap"
		>
			<i class="bi bi-pencil"></i>
			Bearbeiten
		</button>
		<button
			hx-delete={ fmt.Sprintf(
				"%s/htmx/tools/delete?id=%d",
				env.ServerPathPrefix, tool.ID,
			) }
			hx-trigger="click"
			hx-confirm="Sind Sie sicher, dass Sie dieses Werkzeug löschen möchten?"
			hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
			hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
			class="destructive flex gap"
			if !user.IsAdmin() {
				disabled
			}
		>
			<i class="bi bi-trash"></i>
			Löschen
		</button>
	</div>
}

templ toolPageNotes(tool *models.ToolWithNotes) {
	if len(tool.LoadedNotes) > 0 {
		<section class="notes-section">
			<h4>Notizen</h4>
			<div class="notes-list">
				for _, note := range tool.LoadedNotes {
					<div class="card">
						<div class="card-header">
							<span class="note-importance">
								switch note.Level {
									case models.INFO:
										<i class="bi bi-info-circle"></i>
										Info
									case models.ATTENTION:
										<i class="bi bi-exclamation-triangle text-warning"></i>
										<strong>Achtung</strong>
									case models.BROKEN:
										<i class="bi bi-x-circle text-danger"></i>
										<strong>Defekt</strong>
								}
							</span>
							<span class="note-date">
								{ note.CreatedAt.Format("2006-01-02 15:04") }
							</span>
						</div>
						<div class="card-body">
							<p>{ note.Content }</p>
						</div>
					</div>
				}
			</div>
		</section>
	}
}

// TODO: Need some sorting logic here
templ toolPageMetalSheets(user *models.User, metalSheets []*models.MetalSheet, tool *models.ToolWithNotes, slotName string) {
	<section class="metalsheets-section">
		<div class="flex justify-between items-center mb">
			<h4>Bleche</h4>
			if slotName != "" {
				<button
					hx-get={ fmt.Sprintf(
						"%s/htmx/metal-sheets/edit?%s=%d",
						env.ServerPathPrefix, slotName, tool.ID,
					) }
					hx-trigger="click"
					hx-target="body"
					hx-swap="beforeend"
					hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
					class="secondary small flex"
					title="Neues Blech hinzufügen"
				>
					<i class="bi bi-plus-lg"></i>
				</button>
			}
		</div>
		<div class="table-container">
			switch tool.Position {
				case models.PositionBottom:
					@toolPageMetalSheetsTablePositionBottom(
						user, metalSheets,
					)
				case models.PositionTop:
					@toolPageMetalSheetsTablePositionTop(
						user, metalSheets,
					)
			}
		</div>
	</section>
}

templ toolPageMetalSheetsTablePositionBottom(user *models.User, metalSheets []*models.MetalSheet) {
	<figure class="w-full overflow-x-scroll">
		<table class="table borderless compact">
			<thead>
				<tr>
					<th>Stärke (mm)</th>
					<th>Blech (mm)</th>
					<th>Marke (mm)</th>
					<th>Stf.</th>
					<th>Stf. Max</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				if len(metalSheets) == 0 {
					<tr>
						<td colspan="6" class="text-center">
							Keine Bleche für dieses Werkzeug gefunden
						</td>
					</tr>
				} else {
					for _, sheet := range metalSheets {
						<tr>
							<td>{ fmt.Sprintf("%.1f", sheet.TileHeight) }</td>
							<td>{ fmt.Sprintf("%.1f", sheet.Value) }</td>
							<td>{ fmt.Sprintf("%d", sheet.MarkeHeight) }</td>
							<td>{ fmt.Sprintf("%.1f", sheet.STF) }</td>
							<td>{ fmt.Sprintf("%.1f", sheet.STFMax) }</td>
							<td class="button-group flex justify-end items-center">
								<button
									hx-get={ fmt.Sprintf(
										"%s/htmx/metal-sheets/view?id=%d",
										env.ServerPathPrefix, sheet.ID,
									) }
									hx-trigger="click"
									hx-target="body"
									hx-swap="beforeend"
									hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
									class="info small ghost"
									title="Details anzeigen"
								>
									<i class="bi bi-eye"></i>
								</button>
								<button
									hx-get={ fmt.Sprintf(
										"%s/htmx/metal-sheets/edit?id=%d",
										env.ServerPathPrefix, sheet.ID,
									) }
									hx-trigger="click"
									hx-target="body"
									hx-swap="beforeend"
									hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
									class="primary small ghost"
									title="Bearbeiten"
								>
									<i class="bi bi-pencil"></i>
								</button>
								<button
									hx-delete={ fmt.Sprintf(
										"%s/htmx/metal-sheets/delete?id=%d", env.ServerPathPrefix, sheet.ID,
									) }
									hx-trigger="click"
									hx-confirm="Sind Sie sicher, dass Sie dieses Blech löschen möchten?"
									hx-target="closest tr"
									hx-swap="outerHTML"
									hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
									class="destructive small ghost"
									title="Löschen"
									if !user.IsAdmin() {
										disabled
									}
								>
									<i class="bi bi-trash"></i>
								</button>
							</td>
						</tr>
					}
				}
			</tbody>
		</table>
	</figure>
}

templ toolPageMetalSheetsTablePositionTop(user *models.User, metalSheets []*models.MetalSheet) {
	<figure class="w-full overflow-x-scroll">
		<table class="table borderless compact">
			<thead>
				<tr>
					<th>Stärke (mm)</th>
					<th>Blech (mm)</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				if len(metalSheets) == 0 {
					<tr>
						<td colspan="3" class="text-center">
							Keine Bleche für dieses Werkzeug gefunden
						</td>
					</tr>
				} else {
					for _, sheet := range metalSheets {
						<tr>
							<td>{ fmt.Sprintf("%.1f", sheet.TileHeight) }</td>
							<td>{ fmt.Sprintf("%.1f", sheet.Value) }</td>
							<td class="button-group flex justify-end items-center">
								<button
									hx-get={ fmt.Sprintf(
										"%s/htmx/metal-sheets/view?id=%d",
										env.ServerPathPrefix, sheet.ID,
									) }
									hx-trigger="click"
									hx-target="body"
									hx-swap="beforeend"
									hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
									class="info small ghost"
									title="Details anzeigen"
								>
									<i class="bi bi-eye"></i>
								</button>
								<button
									hx-get={ fmt.Sprintf(
										"%s/htmx/metal-sheets/edit?id=%d",
										env.ServerPathPrefix, sheet.ID,
									) }
									hx-trigger="click"
									hx-target="body"
									hx-swap="beforeend"
									hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
									class="primary small ghost"
									title="Bearbeiten"
								>
									<i class="bi bi-pencil"></i>
								</button>
								<button
									hx-delete={ fmt.Sprintf(
										"%s/htmx/metal-sheets/delete?id=%d",
										env.ServerPathPrefix, sheet.ID,
									) }
									hx-trigger="click"
									hx-confirm="Sind Sie sicher, dass Sie dieses Blech löschen möchten?"
									hx-target="closest tr"
									hx-swap="outerHTML"
									hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
									class="destructive small ghost"
									title="Löschen"
									if !user.IsAdmin() {
										disabled
									}
								>
									<i class="bi bi-trash"></i>
								</button>
							</td>
						</tr>
					}
				}
			</tbody>
		</table>
	</figure>
}

templ toolPageCylesList(tool *models.ToolWithNotes, slotName string) {
	<section class="cycles-section flex flex-col gap">
		<h4>Werkzeugnutzung & Zyklen</h4>
		<section class="setatus">
			<h5>Aktueller Status</h5>
			switch tool.Status() {
				case models.ToolStatusActive:
					<a
						role="button"
						class="secondary ghost flex gap justify-between w-full"
						href={ fmt.Sprintf(
							"%s/tools/press/%d",
							env.ServerPathPrefix, *tool.Press,
						) }
					>
						<span class="flex gap items-center  text-sm">
							<span class="contrast ghost">Presse { fmt.Sprintf("%d", *tool.Press) }</span>
							<span class="primary ghost">Aktiv</span>
						</span>
						<i class="bi bi-chevron-right text-muted"></i>
					</a>
				case models.ToolStatusAvailable:
					<span class="info ghost">Verfügbar</span>
				case models.ToolStatusRegenerating:
					<span class="warning ghost">Regenerierung</span>
				default:
					<span>{ tool.Status() }</span>
			}
		</section>
		if slotName != "" {
			<section
				class="cycles"
				hx-get={ fmt.Sprintf(
					"%s/htmx/tools/cycles?%s=%d",
					env.ServerPathPrefix, slotName, tool.ID,
				) }
				hx-trigger="load"
				hx-swap="innerHTML"
				hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
			></section>
		}
	</section>
}

templ toolsPageNavContent() {
	<div class="flex flex-row gap justify-end items-center">
		@components.NavFeedButton()
		@components.NavProfileButton()
		@components.NavHomeButton()
	</div>
}
