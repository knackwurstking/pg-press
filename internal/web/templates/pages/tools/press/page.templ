package press

import (
	"fmt"

	"github.com/knackwurstking/pgpress/internal/web/templates/components"
	"github.com/knackwurstking/pgpress/internal/web/templates/layouts"
	"github.com/knackwurstking/pgpress/internal/database/models"
	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/web/constants"
)

type PageProps struct {
	Press models.PressNumber
	Cycles []*models.Cycle
	User *models.User
	ToolsMap map[int64]*models.Tool
}

templ Page(props PageProps) {
	@layouts.Main(
		layouts.MainOptions{
			PageTitle:   fmt.Sprintf("PG Presse | Werkzeuge Presse %d", props.Press),
			AppBarTitle: fmt.Sprintf("Werkzeug Presse %d", props.Press),
			NavContent:  navContent(),
		},
	) {
		<main class="container fluid">
			<div class="card warning">
				<div class="card-body">
					<span>In Bearbeitung</span>
				</div>
			</div>

            <!-- Press Cycles Table -->
            <section id="cycle-table-section" class="mt-4">
                <h5>Pressennutzungsverlauf</h5>
                <figure class="w-full overflow-x-scroll">
                    <table name="additional-cycles-table" class="table borderless compact">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Datum</th>
                                <th>Werkzeug</th>
                                <th>Position</th>
                                <th>Gesamtzyklen</th>
                                <th>Teilzyklen (berechnet)</th>
                                <th></th>
                            </tr>
                        </thead>

                        <tbody>
                        	@renderCycles(props)
                        </tbody>
                    </table>
                </figure>
            </section>

            // Dialog placeholder
			<span id={ constants.IDToolCycleEditDialog }></span>
        </main>
    }
}

templ renderCycles(props PageProps) {
	if len(props.Cycles) == 0 {
        <tr>
            <td colspan="7" class="text-center">
				Kein Pressenverlauf verfügbar
			</td>
        </tr>
    } else {
		for _, cycle := range props.Cycles {
			@renderCycle(props, cycle)
		}
    }
}

templ renderCycle(props PageProps, cycle *models.Cycle) {
	<tr>
		<td>
			<span>{ fmt.Sprintf("%d", cycle.ID) }</span>
		</td>

		<td>
			<span class="text-sm">{ cycle.Date.Format("02.01.2006") }</span>
		</td>

		<td>
			{{ tool, _ := props.ToolsMap[cycle.ToolID] }}

			if tool != nil {
				<span class="text-xs">{ fmt.Sprintf("%s %s %s", tool.Format.String(), tool.Code, tool.Type) }</span>
			} else {
				<span class="text-xs">{ fmt.Sprintf("%d", cycle.ToolID) }</span>
			}
		</td>

		<td>
			<span class="text-xs">{ cycle.ToolPosition }</span>
		</td>

		<td>
			{ fmt.Sprintf("%d", cycle.TotalCycles) }
		</td>

		<td>
			<span title="Berechnet: Gesamtzyklen - Gesamtzyklen des letzten Eintrags">
				{ fmt.Sprintf("%d", cycle.PartialCycles) }
			</span>
		</td>

		<td class="button-group flex justify-end items-center">
			// TODO: HTMX Button: Goto: Edit cycle entry dialog
			<button
				class="small ghost"

				hx-get={ fmt.Sprintf(
					"%s/htmx/tools/cycle/edit?tool_id=%d&cycle_id=%d",
					env.ServerPathPrefix, cycle.ToolID, cycle.ID,
				) }
				hx-trigger="click"
				hx-target={ fmt.Sprintf("#%s", constants.IDToolCycleEditDialog) }
				hx-swap="outerHTML"
				hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"

				title="Bearbeiten"

				if !props.User.IsAdmin() {
					disabled
				}
			>
				<i class="bi bi-pencil"></i>
			</button>

			// TODO: HTMX Button: Delete cycle from database table and reload section.cycles
			<button
				class="destructive small ghost"

				hx-delete={ fmt.Sprintf(
					"%s/htmx/tools/cycle/delete?cycle_id=%d&tool_id=%d",
					env.ServerPathPrefix, cycle.ID, cycle.ToolID,
				) }
				hx-trigger="click"
				hx-swap="none"
				hx-confirm={ fmt.Sprintf("Diesen Eintrag (%d Zyklen) löschen?", cycle.TotalCycles) }
				hx-on:htmx:response-error="alert(event.detail.xhr.responseText);"
				hx-on:htmx:after-request='window.location.reload();'

				title="Löschen"

				if !props.User.IsAdmin() {
					disabled
				}
			>
				<i class="bi bi-trash"></i>
			</button>
		</td>
	</tr>
}

templ navContent() {
	<div class="flex flex-row gap justify-end items-center">
		@components.NavFeedButton()
		@components.NavProfileButton()
		@components.NavHomeButton()
	</div>
}
