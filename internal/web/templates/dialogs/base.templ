package dialogs

const (
	DialogContentID = "dialog-content"
)

type BaseProps struct {
	ID string

	Type             string // Type like "POST", "PUT"
	Href             string
	SubmitButtonText string

	Error string

	CloseDialog bool
}

templ Base(props BaseProps) {
	if props.CloseDialog {
		<script>
			var dialog = document.querySelector(`dialog#{{ props.ID }}`);
			dialog.close();
			location.reload();
	    </script>
	} else {
		<dialog
			id={ props.ID }
			class="fullscreen clean flex flex-col justify-center items-center"
			onclose="this.parentElement.removeChild(this);"
		>
			<form
				class="flex flex-col gap"
				if props.Type == "POST" {
					hx-post={ props.Href }
				}
				if props.Type == "PUT" {
					hx-put={ props.Href }
				}
				hx-target="body"
				hx-swap="beforeend"
				hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
				enctype="multipart/form-data"
			>
				if props.Error != "" {
					<div class="card compact destructive">
						<div class="card-body">
							{ props.Error }
						</div>
					</div>
				}
				// Content
				<div name="dialog-content" class="flex flex-col gap overflow-y-scroll scroll-smoth no-scrollbar p h-full">
					{ children... }
				</div>
				<footer class="flex gap justify-end">
					<button
						name="close"
						class="secondary flex gap"
						type="button"
						onclick="this.closest('dialog').close()"
					>
						<i class="bi bi-x-circle"></i>
						Schlie√üen
					</button>
					<button
						type="submit"
						class="flex gap"
					>
						<i class="bi bi-check-circle"></i>
						{ props.SubmitButtonText }
					</button>
				</footer>
			</form>
			<script defer>
                document.querySelector('#{{ props.ID }}').showModal();
            </script>
		</dialog>
	}
}
