package dialogs

import (
	"fmt"
	"time"

	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/web/constants"
	"github.com/knackwurstking/pgpress/internal/models"
)

type EditCycleProps struct {
	Tool             *models.Tool
	CycleID          int64
	InputTotalCycles int64
	InputPressNumber *models.PressNumber
	OriginalDate     *time.Time
	Error            string
}

templ EditCycle(props *EditCycleProps) {
	{{
		var (
			baseType = "POST"
			baseHref = fmt.Sprintf(
				"%s/htmx/tools/cycle/edit?tool_id=%d",
				env.ServerPathPrefix, props.Tool.ID,
			)
			submitButtonText = "Erstellen"
		)

		if props.CycleID > 0 {
			baseType = "PUT"
			baseHref = fmt.Sprintf(
				"%s/htmx/tools/cycle/edit?id=%d&tool_id=%d",
				env.ServerPathPrefix,
				props.CycleID,
				props.Tool.ID,
			)
			submitButtonText = "Aktualisieren"
		}
	}}

	@Base(BaseProps{
		Type: 				baseType,
		Href: 				baseHref,
		ID: 				"cycle-edit-dialog",
		Error: 				props.Error,
		SubmitButtonText: 	submitButtonText,
	}){
		<!-- Display active tool information -->
		if props.Tool.Press != nil {
			<section class="tool-info flex flex-col gap-sm">
				<label>Aktives Werkzeug</label>

				<div class="flex flex-col gap-xs">
					<div class="text-sm">
						<strong>Werkzeug:</strong> { props.Tool.String() }
					</div>
					<div class="text-sm">
						<strong>Position:</strong> { props.Tool.Position }
					</div>
				</div>
			</section>
		}

		<section class="press flex flex-col gap-sm">
			<label for="press">Presse</label>

			<select id="press" name="press_number" required>
				<option
					value=""
					disabled
					selected?={ props.Tool.Press == nil && props.InputPressNumber == nil }
				>
					Presse auswählen
				</option>

				for _, i := range []int{0, 2, 3, 4, 5} {
					<option
						value={ fmt.Sprintf("%d", i) }
						selected?={ (props.InputPressNumber != nil && int(*props.InputPressNumber) == i) ||
							(props.InputPressNumber == nil && isPress(props.Tool.Press, i)) }
					>
						Presse { fmt.Sprintf("%d", i) }
					</option>
				}
			</select>
		</section>

		<section class="original-date flex flex-col gap-sm">
			<label>Ursprüngliches Datum</label>

			<input
				name="original_date"
				type="text"
				if props.OriginalDate == nil {
					value={ time.Now().Format(constants.DateFormat) }
				} else {
					value={ props.OriginalDate.Format(constants.DateFormat) }
				}
				title="Datum des ursprünglichen Eintrags (wird nicht geändert)"
			/>
		</section>

		<section class="total-cycles flex flex-col gap-sm">
			<label>Gesamtzyklen</label>

			<input
				type="number"
				min="0"
				step="1"
				id="total_cycles"
				name="total_cycles"
				placeholder="Gesamtzyklen"

				if props.InputTotalCycles != 0 {
					value={ fmt.Sprintf("%d", props.InputTotalCycles) }
				}

				required
			/>
		</section>

		<section class="regeneration">
			<label class="flex flex-row justify-between items-center">
				<span class="flex flex-col gap-0">
					if props.CycleID > 0 {
						<span>
							Werkzeug nach diesem Zyklus-Eintrag als regeneriert markieren.
							if props.CycleID > 0 {
								(Rückwirkend)
							}
						</span>

						<small>
							Diese Aktion setzt die Gesamtzyklen auf 0 zurück
						</small>
					} else {
						<span>
							Werkzeug in den Regenerationszustand versetzen
						</span>
					}
				</span>

				<script>
					function checkboxOnChangeHandler(e) {
						if (e.checked) {
                            if (!confirm("Sicher, diesen Zustand ändern?")) {
                                e.checked = false
                            };
                        }
              		}
				</script>

				<input
					name="regenerating"
					type="checkbox"
					onchange='checkboxOnChangeHandler(this);'
				/>
			</label>
		</section>
	}
}
