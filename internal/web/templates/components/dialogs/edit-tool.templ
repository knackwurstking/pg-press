package dialogs

import (
	"fmt"

	toolmodels "github.com/knackwurstking/pgpress/internal/database/models/tool"
	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/database/models"
)

type EditToolProps struct {
	Tool              	*models.Tool
	InputPosition       string
	InputWidth          int
	InputHeight         int
	InputType           string
	InputCode           string
	InputPressSelection *toolmodels.PressNumber
	Error               string
}

// TODO: Add a regeneration section to this dialog, Set tool as regenerating true/false
templ EditTool(props *EditToolProps) {
	{{
		var (
			baseType 			= "POST"
			baseHref 			= fmt.Sprintf("%s/htmx/tools/edit", env.ServerPathPrefix)
			submitButtonText 	= "Erstellen"
		)

		if props.Tool != nil && props.Tool.ID > 0 {
			baseType = "PUT"
			baseHref = fmt.Sprintf("%s/htmx/tools/edit?id=%d", env.ServerPathPrefix, props.Tool.ID)
			submitButtonText = "Aktualisieren"
		}
	}}

	@Base(BaseProps{
		Type: 				baseType,
		Href: 				baseHref,
		ID: 				"tool-edit-dialog",
		Error: 				props.Error,
		SubmitButtonText: 	submitButtonText,
	}){
		<span class="flex flex-row gap flex-wrap justify-between items-center">
			<span class="flex flex-col gap-0">
				<label for="position">Position</label>

				<select id="position" name="position" required>
					<option
						value=""

						if props.InputPosition == "" {
							selected
						}
					>
						Position ausw√§hlen
					</option>

					<option
						value={ toolmodels.PositionTop }

						if toolmodels.Position(props.InputPosition) == toolmodels.PositionTop {
							selected
						}
					>
						Oberteil
					</option>

					<option
						value={ toolmodels.PositionBottom }

						if toolmodels.Position(props.InputPosition) == toolmodels.PositionBottom {
							selected
						}
					>
						Unterteil
					</option>

					<option
						value={ toolmodels.PositionTopCassette }

						if toolmodels.Position(props.InputPosition) == toolmodels.PositionTopCassette {
							selected
						}
					>
						Cassette Oberteil
					</option>
				</select>
			</span>

			<span class="flex flex-col gap-0 w-fit">
				<label for="press">Presse</label>

				<select
					id="pressSelection"
					name="press-selection"
				>
					<option
						value=""

						if !toolmodels.IsValidPressNumber(props.InputPressSelection) {
							selected
						}
					>
						Nicht Eingebaut
					</option>

					<option
						value="0"

						if toolmodels.IsValidPressNumber(props.InputPressSelection) && *props.InputPressSelection == 0 {
							selected
						}
					>
						Presse 0
					</option>

					<option
						value="2"

						if toolmodels.IsValidPressNumber(props.InputPressSelection) && *props.InputPressSelection == 2 {
							selected
						}
					>
						Presse 2
					</option>

					<option
						value="3"

						if toolmodels.IsValidPressNumber(props.InputPressSelection) && *props.InputPressSelection == 3 {
							selected
						}
					>
						Presse 3
					</option>

					<option
						value="4"

						if toolmodels.IsValidPressNumber(props.InputPressSelection) && *props.InputPressSelection == 4 {
							selected
						}
					>
						Presse 4
					</option>

					<option
						value="5"

						if toolmodels.IsValidPressNumber(props.InputPressSelection) && *props.InputPressSelection == 5 {
							selected
						}
					>
						Presse 5
					</option>
				</select>
			</span>
		</span>

		<span class="flex flex-col gap-0">
			<label>Format</label>

			<div class="flex gap-sm">
				<input
					type="number"
					id="width"
					name="width"
					class="w-full"
					placeholder="z.B. 120"

					if props.InputWidth != 0 {
						value={ props.InputWidth }
					}

					required
				/>
				<span style="margin: auto 0;" class="text-xl">x</span>

				<input
					type="number"
					id="height"
					name="height"
					class="w-full"
					placeholder="z.B. 60"
					if props.InputHeight != 0 {
						value={ props.InputHeight }
					}
					required
				/>
			</div>
		</span>

		<span class="flex flex-col gap-0">
			<label for="type">Typ</label>

			<input
				type="text"
				id="type"
				name="type"
				placeholder="z.B. MASS, FC, GTC"
				value={ props.InputType }
				required
			/>
		</span>

		<span class="flex flex-col gap-0">
			<label for="code">Code</label>

			<input
				type="text"
				id="code"
				name="code"
				placeholder="z.B. G01, G02, XXL01, 3573"
				value={ props.InputCode }
				required
			/>
		</span>
	}
}
