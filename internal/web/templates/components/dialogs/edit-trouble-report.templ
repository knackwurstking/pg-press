package dialogs

import (
	"fmt"

	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/web/templates/components/layouts"
	"github.com/knackwurstking/pgpress/internal/models"
)

type EditTroubleReportProps struct {
	ID              int64
	Title           string
	Content         string
	InvalidTitle    bool
	InvalidContent  bool
	Close           bool
	AttachmentError string
	Attachments     []*models.Attachment
}

templ EditTroubleReport(props *EditTroubleReportProps) {
	{{
		var (
			baseType = "POST"
			baseHref = fmt.Sprintf("%s/htmx/trouble-reports/edit", env.ServerPathPrefix,)
			submitButtonText = "Erstellen"
		)

		if props.ID > 0 {
			baseType = "PUT"
			baseHref = fmt.Sprintf(
				"%s/htmx/trouble-reports/edit?id=%d",
				env.ServerPathPrefix, props.ID,
			)
			submitButtonText = "Aktualisieren"
		}
	}}

	@Base(BaseProps{
		ID: 				"metal-sheet-edit-dialog",
		Type: 				baseType,
		Href: 				baseHref,
		SubmitButtonText: 	submitButtonText,
	}){
		<script>
            var selectedFiles = []; // Used by the file input change event handler
            var existingAttachmentsRemoval = [];

            function updateExistingAttachmentsRemoval() {
                var input = document.getElementById('existing-attachments-removal');
                input.value = existingAttachmentsRemoval.join(',');
            }

            function onAttachments(event) {
                selectedFiles = Array.from(event.target.files);

                function formatFileSize(bytes) {
                    if (bytes === 0) return "0 Bytes";
                    var k = 1024;
                    var sizes = ["Bytes", "KB", "MB", "GB"];
                    var i = Math.floor(Math.log(bytes) / Math.log(k));
                    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
                }

                var previewArea = document.getElementById("file-preview");
                var container = document.getElementById("new-attachments");
                container.innerHTML = "";

                if (selectedFiles.length > 0) {
                    previewArea.style.display = "block";

                    selectedFiles.forEach((file, index) => {
                        var sizeClass =
                            file.size > 10 * 1024 * 1024
                                ? "attachment-error"
                                : "muted text-sm";
                        var sizeText =
                            file.size > 10 * 1024 * 1024
                                ? "ZU GROSS!"
                                : formatFileSize(file.size);

                        /** @type {HTMLTemplateElement} */
                        var t = previewArea.querySelector(
                            `template[name="attachment-item"]`,
                        );

                        /** @type {HTMLElement} */
                        var item = t.content.cloneNode(true);

                        item.querySelector(`.name`).innerText = file.name;

                        var sizeTextElement = item.querySelector(`.size-text`);
                        sizeTextElement.innerText = sizeText;
                        sizeTextElement.className += sizeClass;

                        item.querySelector(`button.delete`).onclick = () => {
                            selectedFiles.splice(index, 1);

                            // Update the file input
                            var fileInput = document.getElementById("attachments");
                            var dt = new DataTransfer();
                            selectedFiles.forEach((file) => dt.items.add(file));
                            fileInput.files = dt.files;

                            onAttachments();
                        };

                        container.appendChild(item);
                    });

                    setTimeout(() => {
                        previewArea.scrollIntoView({behavior: "smooth", block: "start"});
                    }, 100);
                } else {
                    previewArea.style.display = "none";
                }
            }
        </script>

        <!-- Hidden field for attachment order -->
		<input type="hidden" name="existing_attachments_removal" id="existing-attachments-removal" value=""/>

		<label for="title" class="flex flex-col">
			Titel
			<input
				name="title"
				id="title"
				placeholder="Titel"
				value={ props.Title }
				if props.InvalidTitle {
					aria-invalid="true"
				}
			/>
		</label>

		<label for="content" class="flex flex-col">
			Bericht

			<textarea
				name="content"
				id="content"
				placeholder="Bericht"

				if props.InvalidContent {
					aria-invalid="true"
				}
			>{ props.Content }</textarea>
		</label>

		<!-- Attachments Section -->
		<div id="attachments-section" class="attachments-container flex flex-col gap">
			<small class="attachments-label">
				Bilder (max. 10MB pro Datei, max. 10 Dateien)
			</small>

			if props.InvalidTitle || props.InvalidContent {
				<div class="attachment-error">
					<i class="bi bi-exclamation-triangle"></i>
					Anhänge wurden aufgrund von Validierungsfehlern entfernt. Bitte korrigieren Sie die Fehler und laden Sie die Dateien erneut hoch.
				</div>
			}

			if props.AttachmentError != "" {
				<div class="attachment-error">{ props.AttachmentError }</div>
			}

			<!-- Existing Attachments -->
			if len(props.Attachments) > 0 {
				<details
					class="attachments-section border"
					ontoggle='
						if(this.open) setTimeout(() => {
							this.parentElement.scrollIntoView({behavior: "smooth", block: "start"});
						}, 100);
					'
				>
					<summary class="attachments-label flex gap items-center">
						<i class="bi bi-images"></i>
						Vorhandene Bilder ({ len(props.Attachments) })
					</summary>

					<div id="existing-attachments" class="flex flex-col gap">
						for attachmentIndex, attachment := range props.Attachments {
							<div
								class="attachment-item flex gap justify-between items-center border"
								data-id={ fmt.Sprintf("%s", attachment.ID) }
							>
								<div class="attachment-info flex gap items-center">
									<span class="ellipsis">Anhang { attachmentIndex+1 }</span>
									<span class="muted text-sm ellipsis">({ attachment.GetMimeType() })</span>
								</div>

								<div class="attachment-actions flex gap">
									<button
										type="button"
										class="secondary flex gap items-center"
										onclick={ layouts.OpenImageViewer(attachment.GetID()) }
									>
										<small class="flex gap items-center">
											<i class="bi bi-eye"></i>
											Anzeigen
										</small>
									</button>

									<button
										type="button"
										class="destructive flex gap items-center"
										onclick={ deleteAttachment(attachment.GetID()) }
									>
										<small class="flex gap items-center">
											<i class="bi bi-trash"></i>
											Löschen
										</small>
									</button>
								</div>
							</div>
						}
					</div>
				</details>
			}

			<!-- File Upload Area -->
			<div
				class="file-input-area flex flex-col justify-center items-center"
				onclick='document.getElementById("attachments").click();'
				ondrop="window.dialogEditFunctions.handleFileDrop(event)"
				ondragover="window.dialogEditFunctions.handleDragOver(event)"
				ondragleave="window.dialogEditFunctions.handleDragLeave(event)"
			>
				<i class="bi bi-cloud-upload"></i>

				<div class="text-center">Bilder hochladen</div>

				<input
					type="file"
					name="attachments"
					id="attachments"
					multiple
					accept="image/*"
					onchange='onAttachments(this.event)'
				/>
			</div>

			<!-- File Preview Area -->
			<div id="file-preview" class="file-preview flex flex-col gap border">
				<div class="attachments-label">Neue Bilder:</div>

				<div id="new-attachments" class="flex flex-col gap"></div>

				<template name="attachment-item">
					<div
						class="attachment-item flex gap justify-between items-center border"
					>
						<div class="attachment-info flex gap items-center">
							<span class="name ellipsis"></span>
							<span class="size-text ellipsis"></span>
						</div>

						<div class="attachment-actions flex gap">
							<button
								type="button"
								class="delete destructive flex gap items-center"
							>
								<small class="flex gap items-center">
									<i class="bi bi-trash"></i>
									Entfernen
								</small>
							</button>
						</div>
					</div>
				</template>
			</div>
		</div>
	}
}

script deleteAttachment(attachmentId int64) {
    if (!confirm(
        "Sind Sie sicher, dass Sie diesen Anhang löschen möchten?",
    )) return;

    // Find and remove the attachment item from DOM
    var attachmentItem = document.querySelector(
        `#existing-attachments .attachment-item[data-id="${attachmentId}"]`,
    );

    if (attachmentItem) {
        // Remove the DOM element
        attachmentItem.remove();

        // Add the attachment ID to the removal list
        existingAttachmentsRemoval.push(attachmentId);
        updateExistingAttachmentsRemoval();

        // Check if no attachments left and hide the details section
        var existingAttachments = document.getElementById(
            "existing-attachments",
        );
        if (
            existingAttachments &&
            existingAttachments.children.length === 0
        ) {
            var detailsSection =
                existingAttachments.closest("details");
            if (detailsSection) {
                detailsSection.style.display = "none";
            }
        }
    }
}
