package dialogs

import (
	"fmt"
	"time"

	toolmodels "github.com/knackwurstking/pgpress/internal/database/models/tool"
	pressmodels "github.com/knackwurstking/pgpress/internal/database/models/press"
	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/web/constants"
)

type EditPressCycleProps struct {
	Tool             *toolmodels.Tool
	ToolPosition     string
	CycleID          int64
	Close            bool
	InputTotalCycles int64
	InputPressNumber *pressmodels.PressNumber
	OriginalDate     *time.Time
	Error            string
}

func (c *EditPressCycleProps) HasActiveTool() bool {
	return c.Tool != nil && c.ToolPosition != ""
}

func (c *EditPressCycleProps) GetToolID() int64 {
	if c.Tool == nil {
		return 0
	}
	return c.Tool.ID
}

// GetPressFromTool returns the press number from the active tool
func (c *EditPressCycleProps) GetPressFromTool() *pressmodels.PressNumber {
	if c.Tool != nil && c.Tool.Press != nil {
		return c.Tool.Press
	}
	return nil
}

templ EditPressCycle(props *EditPressCycleProps) {
	if props.Close {
		<span
			id={ constants.IDToolCycleEditDialog }

			hx-get={ fmt.Sprintf(
				"%s/htmx/tools/cycles?tool_id=%d&tool_position=%s",
				env.ServerPathPrefix,
				props.GetToolID(), props.ToolPosition,
			) }
			hx-trigger="load"
			hx-target="section.cycles"
			hx-swap="innerHTML"
			hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
		></span>
	} else {
		<dialog class="fullscreen clean" id={ constants.IDToolCycleEditDialog }>
			<form
				class="container"

				if props.CycleID > 0 {
					hx-put={ fmt.Sprintf(
						"%s/htmx/tools/cycle/edit?cycle_id=%d&tool_id=%d&tool_position=%s",
						env.ServerPathPrefix,
						props.CycleID,
						props.GetToolID(), props.ToolPosition,
					) }
				} else {
					hx-post={ fmt.Sprintf(
						"%s/htmx/tools/cycle/edit?tool_id=%d&tool_position=%s",
						env.ServerPathPrefix, props.GetToolID(), props.ToolPosition,
					) }
				}

				hx-trigger="submit"
				hx-target={ fmt.Sprintf("#%s", constants.IDToolCycleEditDialog) }
				hx-swap="outerHTML"
				hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"

				enctype="multipart/form-data"
			>
				if props.Error != "" {
					<div class="card compact destructive">
						<div class="card-body">
							{ props.Error }
						</div>
					</div>
				}

				<div
					class="form-content flex flex-col gap overflow-y-scroll scroll-smoth no-scrollbar p"
				>
					<!-- Display active tool information -->
					if props.HasActiveTool() {
						<section class="tool-info flex flex-col gap-sm">
							<label>Aktives Werkzeug</label>

							<div class="flex flex-col gap-xs">
								<div class="text-sm">
									<strong>Werkzeug:</strong> { props.Tool.String() }
								</div>
								<div class="text-sm">
									<strong>Position:</strong> { props.ToolPosition }
								</div>
							</div>
						</section>
					}

					<section class="press flex flex-col gap-sm">
						<label for="press">Presse</label>

						<select id="press" name="press_number" required>
							<option
								value=""
								disabled
								selected?={ props.GetPressFromTool() == nil && props.InputPressNumber == nil }
							>
								Presse auswählen
							</option>

							for _, i := range []int{0, 2, 3, 4, 5} {
								<option
									value={ fmt.Sprintf("%d", i) }
									selected?={ (props.InputPressNumber != nil && int(*props.InputPressNumber) == i) ||
										(props.InputPressNumber == nil && isPress(props.GetPressFromTool(), i)) }
								>
									Presse { fmt.Sprintf("%d", i) }
								</option>
							}
						</select>
					</section>

					<section class="original-date flex flex-col gap-sm">
						<label>Ursprüngliches Datum</label>

						<input
							name="original_date"
							type="text"
							if props.OriginalDate == nil {
								value={ time.Now().Format(constants.DateFormat) }
							} else {
								value={ props.OriginalDate.Format(constants.DateFormat) }
							}
							title="Datum des ursprünglichen Eintrags (wird nicht geändert)"
						/>
					</section>

					<section class="total-cycles flex flex-col gap-sm">
						<label>Gesamtzyklen</label>

						<input
							type="number"
							min="0"
							step="1"
							id="total_cycles"
							name="total_cycles"
							placeholder="Gesamtzyklen"

							if props.InputTotalCycles != 0 {
								value={ fmt.Sprintf("%d", props.InputTotalCycles) }
							}

							required
						/>
					</section>

					<section class="regeneration">
						<label class="flex flex-row justify-between items-center">
							<span class="flex flex-col gap-0">
								if props.CycleID > 0 {
									<span>
										Werkzeug nach diesem Zyklus-Eintrag als regeneriert markieren.
										if props.CycleID > 0 {
											(Rückwirkend)
										}
									</span>

									<small>
										Diese Aktion setzt die Gesamtzyklen auf 0 zurück
									</small>
								} else {
									<span>
										Werkzeug in den Regenerationszustand versetzen
									</span>
								}
							</span>

							<script>
								function checkboxOnChangeHandler(e) {
    								if (e.checked) {
                                        if (!confirm("Sicher, diesen Zustand ändern?")) {
                                            e.checked = false
                                        };
                                    }
								}
							</script>

							<input
								name="regenerating"
								type="checkbox"
								onchange='checkboxOnChangeHandler(this);'
							/>
						</label>
					</section>
				</div>

				<footer class="flex gap justify-end">
					<button
						class="secondary flex gap"
						type="button"

						hx-get={ fmt.Sprintf(
							"%s/htmx/tools/cycle/edit?close=true&tool_id=%d&tool_position=%s",
							env.ServerPathPrefix, props.GetToolID(), props.ToolPosition,
						) }
						hx-trigger="click"
						hx-target={ fmt.Sprintf("#%s", constants.IDToolCycleEditDialog) }
						hx-swap="outerHTML"
						hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
					>
						<i class="bi bi-x-circle"></i>
						Schließen
					</button>

					<button type="submit" class="flex gap">
						<i class="bi bi-check-circle"></i>

						if props.CycleID > 0 {
							Aktualisieren
						} else {
							Erstellen
						}
					</button>
				</footer>
			</form>

			<script defer>
                document.querySelector("#toolCycleEditDialog").showModal();
            </script>
		</dialog>
	}
}