package tooltemplates

import (
	"fmt"
	"time"

	"github.com/knackwurstking/pgpress/internal/database/models"
	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/web/constants"
)

type CycleEditDialogProps struct {
	SlotTop          *models.Tool
	SlotTopCassette  *models.Tool
	SlotBottom       *models.Tool
	CycleID          int64
	Close            bool
	InputTotalCycles int64
	InputPressNumber *models.PressNumber
	OriginalDate     *time.Time
	Error            string
}

func (c *CycleEditDialogProps) HasActiveSlot() bool {
	return c.SlotTop != nil || c.SlotTopCassette != nil || c.SlotBottom != nil
}

// TODO: Change dialog for the new slot system
templ CycleEditDialog(props *CycleEditDialogProps) {
	if props.Close {
		<span
			id={ constants.IDToolCycleEditDialog }
			hx-get={ fmt.Sprintf(
				"%s/htmx/tools/cycles?slot_top=%d&slot_top_cassette=%d&slot_bottom=%d",
				env.ServerPathPrefix,
				props.SlotTop.ID, props.SlotTopCassette.ID, props.SlotBottom.ID,
			) }
			hx-trigger="load"
			hx-target="section.cycles"
			hx-swap="innerHTML"
			hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
		></span>
	} else {
		<dialog class="fullscreen clean" id={ constants.IDToolCycleEditDialog }>
			<form
				class="container"
				if props.CycleID > 0 {
					hx-put={ fmt.Sprintf(
						"%s/htmx/tools/cycle/edit?cycle_id=%d&slot_top=%d&slot_top_cassette=%d&slot_bottom=%d",
						env.ServerPathPrefix,
						props.SlotTop.ID, props.SlotTopCassette.ID, props.SlotBottom.ID, props.CycleID,
					) }
				} else {
					hx-post={ fmt.Sprintf(
						"%s/htmx/tools/cycle/edit?slot_top=%d&slot_top_cassette=%d&slot_bottom=%d",
						env.ServerPathPrefix, props.SlotTop.ID, props.SlotTopCassette.ID, props.SlotBottom.ID,
					) }
				}
				hx-trigger="submit"
				hx-target={ fmt.Sprintf("#%s", constants.IDToolCycleEditDialog) }
				hx-swap="outerHTML"
				hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
				enctype="multipart/form-data"
			>
				<div class="form-content flex flex-col gap overflow-y-scroll scroll-smoth no-scrollbar p">
					if props.Error != "" {
						<div class="card compact destructive">
							<div class="card-body">
								{ props.Error }
							</div>
						</div>
					}
					<section class="press flex flex-col gap-sm">
						<label for="press">Presse</label>
						<select id="press" name="press_number" required>
							<option
								value=""
								disabled
								selected?={ props.Tool.Press == nil && props.InputPressNumber == nil }
							>
								Presse auswählen
							</option>
							for _, i := range []int{0, 2, 3, 4, 5} {
								<option
									value={ fmt.Sprintf("%d", i) }
									selected?={ (props.InputPressNumber != nil && int(*props.InputPressNumber) == i) ||
										(props.InputPressNumber == nil && isSelectedPress(props.Tool.Press, i)) }
								>
									Presse { i }
								</option>
							}
						</select>
					</section>
					if props.CycleID > 0 && props.OriginalDate != nil {
						<section class="original-date flex flex-col gap-sm">
							<label>Ursprüngliches Datum</label>
							<input
								type="text"
								value={ props.OriginalDate.Format("02.01.2006") }
								readonly
								class="muted"
								title="Datum des ursprünglichen Eintrags (wird nicht geändert)"
							/>
						</section>
					}
					<section class="total-cycles flex flex-col gap-sm">
						<label>Gesamtzyklen</label>
						<input
							type="number"
							min="0"
							step="1"
							id="total_cycles"
							name="total_cycles"
							placeholder="Gesamtzyklen"
							if props.InputTotalCycles != 0 {
								value={ props.InputTotalCycles }
							}
							required
						/>
					</section>
				</div>
				<footer class="flex gap justify-end">
					<button
						type="button"
						class="secondary flex gap"
						hx-get={ fmt.Sprintf(
							"%s/htmx/tools/cycle/edit?close=true&tool_id=%d",
							env.ServerPathPrefix, props.Tool.ID,
						) }
						hx-trigger="click"
						hx-target={ fmt.Sprintf("#%s", constants.IDToolCycleEditDialog) }
						hx-swap="outerHTML"
						hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
					>
						<i class="bi bi-x-circle"></i>
						Schließen
					</button>
					<button type="submit" class="flex gap">
						<i class="bi bi-check-circle"></i>
						if props.CycleID > 0 {
							Aktualisieren
						} else {
							Erstellen
						}
					</button>
				</footer>
			</form>
			<script defer>
                document.querySelector("#toolCycleEditDialog").showModal();
            </script>
		</dialog>
	}
}

func isSelectedPress(p *models.PressNumber, v int) bool {
	if p == nil {
		return false
	}
	return int(*p) == v
}
