package tools

import (
	"fmt"

	"github.com/knackwurstking/pgpress/internal/database/models"
	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/web/constants"
)

type EditDialogProps struct {
	ToolID              int64
	Close               bool
	InputPosition       string
	InputWidth          int
	InputHeight         int
	InputType           string
	InputCode           string
	ReloadToolsList     bool // TODO: This needs to be handled differently, get rid of it
	InputPressSelection *models.PressNumber
	Error               string
}

templ EditDialog(props *EditDialogProps) {
	if props.Close {
		<span onload="window.location.reload();"></span>
	} else {
		<dialog
			name="tool-edit-dialog"
			id={ constants.IDToolEditDialog }
			class="fullscreen clean flex flex-col justify-center items-center"
		>
			<form
				class="flex flex-col gap max-w-full"
				if props.ToolID > 0 {
					hx-put={ fmt.Sprintf(
						"%s/htmx/tools/edit?id=%d",
						env.ServerPathPrefix, props.ToolID,
					) }
				} else {
					hx-post={ env.ServerPathPrefix + "/htmx/tools/edit" }
				}
				hx-trigger="submit"
				hx-target={ fmt.Sprintf("#%s", constants.IDToolEditDialog) }
				hx-swap="outerHTML"
				enctype="multipart/form-data"
			>
				if props.Error != "" {
					<div class="card compact destructive">
						<div class="card-body">
							{ props.Error }
						</div>
					</div>
				}
				<div class="form-content flex flex-col gap overflow-y-scroll scroll-smoth no-scrollbar p">
					<span class="flex flex-row gap flex-wrap justify-between items-center">
						<span class="flex flex-col gap-0">
							<label for="position">Position</label>
							<select
								id={ constants.IDPosition }
								name="position"
								required
							>
								<option
									value=""
									if props.InputPosition == "" {
										selected
									}
								>Position auswählen</option>
								<option
									value={ models.PositionTop }
									if models.Position(props.InputPosition) == models.PositionTop {
										selected
									}
								>Oberteil</option>
								<option
									value={ models.PositionBottom }
									if models.Position(props.InputPosition) == models.PositionBottom {
										selected
									}
								>Unterteil</option>
								<option
									value={ models.PositionTopCassette }
									if models.Position(props.InputPosition) == models.PositionTopCassette {
										selected
									}
								>Cassette Oberteil</option>
							</select>
						</span>
						<span class="flex flex-col gap-0 w-fit">
							<label for="press">Presse</label>
							<select
								id={ constants.IDPressSelection }
								name="press-selection"
							>
								<option
									value=""
									if !models.IsValidPressNumber(props.InputPressSelection) {
										selected
									}
								>Nicht Eingebaut</option>
								<option
									value="0"
									if models.IsValidPressNumber(props.InputPressSelection) && *props.InputPressSelection == 0 {
										selected
									}
								>Presse 0</option>
								<option
									value="2"
									if models.IsValidPressNumber(props.InputPressSelection) && *props.InputPressSelection == 2 {
										selected
									}
								>Presse 2</option>
								<option
									value="3"
									if models.IsValidPressNumber(props.InputPressSelection) && *props.InputPressSelection == 3 {
										selected
									}
								>Presse 3</option>
								<option
									value="4"
									if models.IsValidPressNumber(props.InputPressSelection) && *props.InputPressSelection == 4 {
										selected
									}
								>Presse 4</option>
								<option
									value="5"
									if models.IsValidPressNumber(props.InputPressSelection) && *props.InputPressSelection == 5 {
										selected
									}
								>Presse 5</option>
							</select>
						</span>
					</span>
					<span class="flex flex-col gap-0">
						<label>Format</label>
						<div class="flex gap-sm">
							<input
								type="number"
								id={ constants.IDWidth }
								name="width"
								class="w-full"
								placeholder="z.B. 120"
								if props.InputWidth != 0 {
									value={ props.InputWidth }
								}
								required
							/>
							<span style="margin: auto 0;" class="text-xl">x</span>
							<input
								type="number"
								id={ constants.IDHeight }
								name="height"
								class="w-full"
								placeholder="z.B. 60"
								if props.InputHeight != 0 {
									value={ props.InputHeight }
								}
								required
							/>
						</div>
					</span>
					<span class="flex flex-col gap-0">
						<label for="type">Typ</label>
						<input
							type="text"
							id={ constants.IDType }
							name="type"
							placeholder="z.B. MASS, FC, GTC"
							value={ props.InputType }
							required
						/>
					</span>
					<span class="flex flex-col gap-0">
						<label for="code">Code</label>
						<input
							type="text"
							id={ constants.IDCode }
							name="code"
							placeholder="z.B. G01, G02, XXL01, 3573"
							value={ props.InputCode }
							required
						/>
					</span>
				</div>
				<footer class="flex gap justify-end p">
					<button
						type="button"
						class="secondary flex gap"
						hx-get={ fmt.Sprintf(
							"%s/htmx/tools/edit?id=%d&close=true",
							env.ServerPathPrefix, props.ToolID,
						) }
						hx-trigger="click"
						hx-target={ fmt.Sprintf("#%s", constants.IDToolEditDialog) }
						hx-swap="outerHTML"
					>
						<i class="bi bi-x-circle"></i>
						Schließen
					</button>
					<button type="submit" class="flex gap">
						<i class="bi bi-check-circle"></i>
						if props.ToolID > 0 {
							Aktualisieren
						} else {
							Erstellen
						}
					</button>
				</footer>
			</form>
			<script>
    			document.querySelector(`dialog[name="tool-edit-dialog"]`).showModal();
    		</script>
		</dialog>
	}
}
