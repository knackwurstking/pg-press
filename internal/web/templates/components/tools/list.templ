package tooltemplates

import (
	"fmt"

	"github.com/knackwurstking/pgpress/internal/database/models"
	"github.com/knackwurstking/pgpress/internal/database/services/tool"
	"github.com/knackwurstking/pgpress/internal/env"
)

templ List(tools []*tool.ToolWithNotes) {
	if len(tools) == 0 {
		<div class="flex justify-center items-center mt">
			<div class="text-center muted ghost">
				<i class="bi bi-inbox mb text-4xl"></i>
				<p class="m-0">Keine Werkzeuge gefunden.</p>
			</div>
		</div>
	}
	for _, t := range tools {
		@listItem(t.ID, t)
	}
}

// TODO: Add icons previewing notes (warning, error, info or whatever)
templ listItem(id int64, tool *tool.ToolWithNotes) {
	<li id={ fmt.Sprintf("tool-%d", id) }>
		<a
			role="button"
			href={ fmt.Sprintf(env.ServerPathPrefix+"/tools/tool/%d", id) }
			class="ghost contrast flex justify-between items-center flex gap justify-between"
		>
			<span class="flex gap-sm w-full">
				<span class="flex flex-col gap-sm">
					<span class="text-sm text-normal">{ tool.Format.Width }x{ tool.Format.Height } { tool.Code } { tool.Type }</span>
					<span>
						@PositionBadge(tool.Position, "muted")
						switch tool.Status() {
							case models.ToolStatusActive:
								<small class="badge badge-sm badge-outline primary ml">Eingebaut</small>
							case models.ToolStatusAvailable:
								<small class="badge badge-sm badge-outline info ml">Verf√ºgbar</small>
							case models.ToolStatusRegenerating:
								<small class="badge badge-sm badge-outline warning ml">Regenerierung</small>
						}
					</span>
				</span>
				<span
					class="flex justify-end items-center w-full pr text-sm"
					hx-get={ fmt.Sprintf(
						"%s/htmx/tools/total-cycles?tool_id=%d&input=false&color_class=%s",
						env.ServerPathPrefix, tool.ID, "muted",
					) }
					hx-trigger="load"
					hx-swap="innerHTML"
					hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
				></span>
			</span>
			<i class="bi bi-chevron-right"></i>
		</a>
	</li>
}
