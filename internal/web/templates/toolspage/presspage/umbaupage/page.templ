package umbaupage

import (
	"fmt"
	"github.com/knackwurstking/pgpress/internal/web/templates/components"
	"github.com/knackwurstking/pgpress/internal/web/templates/layouts"
	"github.com/knackwurstking/pgpress/pkg/models"
)

type PageProps struct {
	PressNumber models.PressNumber
	User        *models.User
	Tools       []*models.Tool // TODO: Create a datalist for tool inputs and some completion
}

func (pp *PageProps) GetSlots() map[models.Position]*models.Tool {
	slots := map[models.Position]*models.Tool{
		models.PositionTop:         nil,
		models.PositionTopCassette: nil,
		models.PositionBottom:      nil,
	}

	for _, t := range pp.Tools {
		if t.Press != nil && *t.Press == pp.PressNumber {
			slots[t.Position] = t
		}
	}

	return slots
}

templ Page(props *PageProps) {
	@layouts.Main(
		layouts.MainOptions{
			PageTitle:   fmt.Sprintf("PG Presse | Umbau Presse %d", props.PressNumber),
			AppBarTitle: fmt.Sprintf("Umbau Presse %d", props.PressNumber),
			NavContent:  navContent(),
		},
	) {
		{{ slots := props.GetSlots() }}
		<main id="umbau-page">
			<h1>Werkzeugumbau an Presse { fmt.Sprintf("%d", props.PressNumber) }</h1>
			<form hx-post={ fmt.Sprintf("/presses/%d/umbau", props.PressNumber) }>
				<div>
					<h2>Oberteil</h2>
					if slots[models.PositionTop] != nil {
						<p>Aktuelles Werkzeug: { slots[models.PositionTop].String() }</p>
					} else {
						<p>Aktuelles Werkzeug: -</p>
					}
					<label for="top">Neues Werkzeug:</label>
					<input type="text" id="top" name="top" placeholder="Werkzeug-ID oder Code"/>
				</div>
				<hr/>
				<div>
					<h2>Kassette Oberteil (optional)</h2>
					if slots[models.PositionTopCassette] != nil {
						<p>Aktuelles Werkzeug: { slots[models.PositionTopCassette].String() }</p>
					} else {
						<p>Aktuelles Werkzeug: -</p>
					}
					<label for="top-cassette">Neues Werkzeug:</label>
					<input type="text" id="top-cassette" name="top-cassette" placeholder="Werkzeug-ID oder Code"/>
				</div>
				<hr/>
				<div>
					<h2>Unterteil</h2>
					if slots[models.PositionBottom] != nil {
						<p>Aktuelles Werkzeug: { slots[models.PositionBottom].String() }</p>
					} else {
						<p>Aktuelles Werkzeug: -</p>
					}
					<label for="bottom">Neues Werkzeug:</label>
					<input type="text" id="bottom" name="bottom" placeholder="Werkzeug-ID oder Code"/>
				</div>
				<hr/>
				<button type="submit">Umbau speichern</button>
			</form>
		</main>
	}
}

templ navContent() {
	<div class="flex flex-row gap justify-end items-center">
		@components.NavFeedButton()
		@components.NavProfileButton()
		@components.NavHomeButton()
	</div>
}
