package toolspage

import (
	"fmt"

	"github.com/knackwurstking/pgpress/pkg/models"
	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/internal/web/templates/components"
	"github.com/knackwurstking/pgpress/internal/web/templates/layouts"
)

type PageProps struct {
	Tools []*models.ToolWithNotes
	PressUtilization []models.PressUtilization
}

templ Page(props *PageProps) {
	@layouts.Main(
		layouts.MainOptions{
			PageTitle:   "PG Presse | Werkzeuge",
			AppBarTitle: "Werkzeuge",
			NavContent:  navContent(),
		},
	) {
		<main class="container fluid">
			<div class="tools" style="display: flex; flex-direction: column; gap: 1.5rem;">
				@sectionPress(props)
				@sectionTools(props)
			</div>
		</main>
	}
}

templ navContent() {
	<div class="flex flex-row gap justify-end items-center">
		@components.NavFeedButton()
		@components.NavProfileButton()
		@components.NavHomeButton()
	</div>
}

templ sectionPress(props *PageProps) {
	<details class="active-tools" open>
		<summary class="mb">
			<h4>
				<i class="bi bi-gear-fill mr"></i>
				Eingebaute Werkzeuge
			</h4>
		</summary>

		<ul
			class="flex flex-col gap m-0 p-0"
			style="list-style: none;"
		>
			for _, u := range props.PressUtilization {
				{{
					var (
						top    		string
						topCassette string
						bottom 		string
					)

					for _, t := range u.Tools {
						switch t.Position {
						case models.PositionTop:
							top = fmt.Sprintf("%s %s %s", t.Format.String(), t.Code, t.Type)
						case models.PositionTopCassette:
							topCassette = fmt.Sprintf("%s %s %s", t.Format.String(), t.Code, t.Type)
						case models.PositionBottom:
							bottom = fmt.Sprintf("%s %s %s", t.Format.String(), t.Code, t.Type)
						}
					}
				}}

				@sectionPressListItem(
					fmt.Sprintf("Presse %d", u.PressNumber),
					top,
					topCassette,
					bottom,
					fmt.Sprintf("%s/tools/press/%d", env.ServerPathPrefix, u.PressNumber),
				)
			}
		</ul>
	</details>
}

templ sectionPressListItem(title, top, topCassette, bottom, href string) {
	<li title={ title }>
		<a
			role="button"
			href={ href }
			class="outline contrast flex justify-between items-center"
		>
			<span class="flex flex-col gap-lg w-full">
				<h5>{ title }</h5>

				<span class="flex flex-wrap gap-lg justify-between items-center w-full">
					if top != "" || topCassette != "" {
						<!-- Upper Tool -->
						<span class="flex flex-col gap-sm">
							if top != "" {
								<span class="flex flex-col gap-0 justify-center items-start gap-sm">
									@components.PositionBadge(models.PositionTop, "primary text-bold")
									<small class="text-sm">{ top }</small>
								</span>
							}

							if topCassette != "" {
								<span class="flex flex-col gap-0 justify-center items-start gap-sm">
									@components.PositionBadge(models.PositionTopCassette, "primary text-bold")
									<small class="text-sm">{ topCassette }</small>
								</span>
							}
						</span>
					}

					if bottom != "" {
						<!-- Lower Tool -->
						<span class="flex flex-col justify-center items-start gap-sm">
							@components.PositionBadge(models.PositionBottom, "primary text-bold")
							<small class="text-sm">{ bottom }</small>
						</span>
					}
				</span>
			</span>
			<i class="bi bi-chevron-right"></i>
		</a>
	</li>
}

templ sectionTools(props *PageProps) {
	<div class="all-tools p">
		<h4 class="mb p">
			<i class="bi bi-archive mr"></i>
			Alle Werkzeuge
		</h4>
		<div class="actions-bar flex gap justify-end items-center">
			<button
				type="button"
				class="primary flex gap"
				hx-get={ env.ServerPathPrefix + "/htmx/tools/edit" }
				hx-trigger="click"
				hx-target="body"
				hx-swap="beforeend"
				hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
			>
				<i class="bi bi-plus-lg"></i>
				<span>Erstellen</span>
			</button>
		</div>
		<ul
			id="all-tools-list"
			hx-get={ env.ServerPathPrefix + "/htmx/tools/list" }
			hx-trigger="load,pageLoaded"
			hx-swap="innerHTML"
			hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
			class="flex flex-col gap m-t p-0"
			style="list-style: none;"
		></ul>
		<script>
			window.addEventListener("visibilitychange", function() {
    			if (document.visibilityState === 'visible') {
                    console.debug("Reload #all-tools-list because of a visibility change")
    				htmx.trigger("#all-tools-list", 'pageLoaded');
    			}
    		});
		</script>
	</div>
}
