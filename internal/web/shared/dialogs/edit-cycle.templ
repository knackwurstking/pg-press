package dialogs

import (
	"fmt"
	"time"

	"github.com/knackwurstking/pgpress/internal/constants"
	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/pkg/models"
)

type EditCycleProps struct {
	Tool    *models.Tool
	CycleID int64

	InputTotalCycles int64
	InputPressNumber *models.PressNumber
	OriginalDate     *time.Time

	CloseDialog bool // Standalone prop
}

templ EditCycle(props *EditCycleProps) {
	{{
		var (
			baseType         = "POST"
			submitButtonText = "Erstellen"
			baseHref         = fmt.Sprintf("%s/htmx/tools/cycle/edit", env.ServerPathPrefix)
		)

		if props.Tool != nil && props.CycleID <= 0 {
			baseType = "POST"
			submitButtonText = "Erstellen"
			baseHref = fmt.Sprintf("%s/htmx/tools/cycle/edit?tool_id=%d",
				env.ServerPathPrefix, props.Tool.ID)
		} else if props.CycleID > 0 {
			baseType = "PUT"
			submitButtonText = "Aktualisieren"
			baseHref = fmt.Sprintf("%s/htmx/tools/cycle/edit?id=%d",
				env.ServerPathPrefix, props.CycleID)
		}
	}}
	@Base(BaseProps{
		Type:             baseType,
		Href:             baseHref,
		ID:               "cycle-edit-dialog",
		SubmitButtonText: submitButtonText,
		CloseDialog:      props.CloseDialog,
	}) {
		<!-- Display active tool information -->
		if props.Tool != nil {
			<section class="tool-info flex flex-col gap-sm">
				<label>Aktives Werkzeug</label>
				<div class="flex flex-col gap-xs">
					<div class="text-sm">
						<strong>Werkzeug:</strong> { props.Tool.String() }
					</div>
					<div class="text-sm">
						<strong>Position:</strong> { props.Tool.Position }
					</div>
				</div>
			</section>
		}
		<section class="press flex flex-col gap-sm">
			<label for="press">Presse</label>
			<select id="press" name="press_number" required>
				<option
					value=""
					disabled
					selected?={ props.Tool != nil &&
								props.Tool.Press == nil &&
								props.InputPressNumber == nil }
				>
					Presse auswählen
				</option>
				for _, i := range []int{0, 2, 3, 4, 5} {
					<option
						value={ fmt.Sprintf("%d", i) }
						selected?={ (props.InputPressNumber != nil &&
										int(*props.InputPressNumber) == i) ||
									(props.InputPressNumber == nil &&
										props.Tool != nil &&
										isPress(props.Tool.Press, i)) }
					>
						Presse { fmt.Sprintf("%d", i) }
					</option>
				}
			</select>
		</section>
		<section class="original-date flex flex-col gap-sm">
			<label>Ursprüngliches Datum</label>
			<input
				name="original_date"
				type="text"
				if props.OriginalDate == nil {
					value={ time.Now().Format(constants.DateFormat) }
				} else {
					value={ props.OriginalDate.Format(constants.DateFormat) }
				}
				title="Datum des ursprünglichen Eintrags (wird nicht geändert)"
			/>
		</section>
		<section class="total-cycles flex flex-col gap-sm">
			<label>Gesamtzyklen</label>
			<input
				type="number"
				min="0"
				step="1"
				id="total_cycles"
				name="total_cycles"
				placeholder="Gesamtzyklen"
				if props.InputTotalCycles != 0 {
					value={ fmt.Sprintf("%d", props.InputTotalCycles) }
				}
				required
			/>
		</section>
		<section class="regeneration">
			<label class="flex flex-row justify-between items-center">
				<span class="flex flex-col gap-0">
					if props.CycleID > 0 {
						<small>
							Werkzeug wurde Regeneriert nach diesem Zyklus
						</small>
					} else {
						<span>
							Werkzeug in den Regenerationszustand versetzen
						</span>
					}
				</span>
				<script>
					function checkboxOnChangeHandler(e) {
						if (e.checked) {
                            if (!confirm("Sicher, diesen Zustand ändern?")) {
                                e.checked = false
                            };
                        }
              		}
				</script>
				<input
					name="regenerating"
					type="checkbox"
					onchange="checkboxOnChangeHandler(this);"
				/>
			</label>
		</section>
	}
}

func isPress(p *models.PressNumber, v int) bool {
	if p == nil {
		return false
	}

	return int(*p) == v
}
