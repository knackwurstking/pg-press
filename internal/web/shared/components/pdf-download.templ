package components

// DownloadCycleSummaryPDF provides a script function to download cycle summary PDFs

script DownloadCycleSummaryPDF(url templ.SafeURL) {
	async function download() {
		try {
			// Show loading state
			const button = event.target;
			const originalText = button.textContent;
			button.textContent = 'LÃ¤dt...';
			button.disabled = true;

			// Fetch the PDF
			const response = await fetch(url);
			if (!response.ok) {
				throw new Error('PDF konnte nicht geladen werden');
			}

			// Get the blob
			const blob = await response.blob();

			// Create download link
			const downloadUrl = window.URL.createObjectURL(blob);
			const a = document.createElement('a');
			a.style.display = 'none';
			a.href = downloadUrl;

			// Get filename from response headers or use default
			const contentDisposition = response.headers.get('Content-Disposition');
			let filename = 'cycle_summary.pdf';
			if (contentDisposition) {
				const filenameMatch = contentDisposition.match(/filename="(.+)"/);
				if (filenameMatch) {
					filename = filenameMatch[1];
				}
			}
			a.download = filename;

			// Trigger download
			document.body.appendChild(a);
			a.click();

			// Cleanup
			window.URL.revokeObjectURL(downloadUrl);
			document.body.removeChild(a);

			// Reset button
			button.textContent = originalText;
			button.disabled = false;
		} catch (error) {
			console.error('Download failed:', error);
			alert('Fehler beim Download: ' + error.message);

			// Reset button
			const button = event.target;
			button.textContent = 'Zusammenfassung (PDF)';
			button.disabled = false;
		}
	}

	download();
}

// DownloadTroubleReportPDF provides a script function to download trouble report PDFs

script DownloadTroubleReportPDF(url string) {
	async function download() {
		try {
			// Show loading state
			const button = event.target.closest('button');
			const originalHTML = button.innerHTML;
			button.innerHTML = '<i class="bi bi-hourglass-split"></i>';
			button.disabled = true;

			// Fetch the PDF
			const response = await fetch(url);
			if (!response.ok) {
				throw new Error('PDF konnte nicht geladen werden');
			}

			// Get the blob
			const blob = await response.blob();

			// Create download link
			const downloadUrl = window.URL.createObjectURL(blob);
			const a = document.createElement('a');
			a.style.display = 'none';
			a.href = downloadUrl;

			// Get filename from response headers or use default
			const contentDisposition = response.headers.get('Content-Disposition');
			let filename = 'trouble_report.pdf';
			if (contentDisposition) {
				const filenameMatch = contentDisposition.match(/filename="(.+)"/);
				if (filenameMatch) {
					filename = filenameMatch[1];
				}
			}
			a.download = filename;

			// Trigger download
			document.body.appendChild(a);
			a.click();

			// Cleanup
			window.URL.revokeObjectURL(downloadUrl);
			document.body.removeChild(a);

			// Reset button
			button.innerHTML = originalHTML;
			button.disabled = false;
		} catch (error) {
			console.error('Download failed:', error);
			alert('Fehler beim Download: ' + error.message);

			// Reset button
			const button = event.target.closest('button');
			button.innerHTML = '<i class="bi bi-share"></i>';
			button.disabled = false;
		}
	}

	download();
}
