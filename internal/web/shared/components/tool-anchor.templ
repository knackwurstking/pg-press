package components

import (
	"fmt"
	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/pkg/models"
)

type ToolAnchorOptions struct {
	EnableStatusBadge  bool
	EnableBindingBadge bool
	EnableTotalCycles  bool
}

templ ToolAnchor(tool *models.ResolvedTool, options *ToolAnchorOptions) {
	{{
		if options == nil {
			options = &ToolAnchorOptions{}
		}
	}}
	<a
		role="button"
		class="outline contrast flex justify-between items-center p"
		href={ fmt.Sprintf("%s/tools/tool/%d",
			env.ServerPathPrefix, tool.ID) }
	>
		<span class="flex gap justify-between w-full">
			<span class="flex flex-col gap w-full">
				<span class="text-semibold">
					{ tool.String() }
				</span>
				<span class="flex gap justify-between items-center w-full">
					@PositionBadge(tool.Position, "primary text-bold")
					if options.EnableStatusBadge {
						@ToolStatusBadge(tool.Tool)
					}
					if options.EnableTotalCycles {
						<span
							class="total-cycles-container flex justify-end items-center w-full pr text-sm"
							hx-get={ fmt.Sprintf(
								"%s/htmx/tools/total-cycles?tool_id=%d&tool_position=%s&input=false",
								env.ServerPathPrefix, tool.ID, tool.Position,
							) }
							hx-trigger="load"
							hx-swap="innerHTML"
							hx-on:htmx:response-error="alert(event.detail.xhr.responseText)"
						></span>
					}
				</span>
				if tool.Position == models.PositionTop && tool.IsBound() {
					<span class="text-sm italic info ghost">
						if tool.GetBindingTool() == nil {
							<i>Ooops, there is no binding tool</i>
						} else {
							<i>Kassette: { tool.GetBindingTool().String() }</i>
						}
					</span>
				}
			</span>
		</span>
		<i class="bi bi-chevron-right"></i>
	</a>
}
