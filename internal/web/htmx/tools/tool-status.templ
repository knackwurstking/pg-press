package tools

import (
	"fmt"

	"github.com/knackwurstking/pgpress/internal/env"
	"github.com/knackwurstking/pgpress/pkg/models"
)

templ ToolStatusBadge(tool *models.Tool) {
	switch tool.Status() {
		case models.StatusActive:
			<span class="badge badge-sm badge-outline primary">
				<span class="flex flex-col gap-0 justify-center items-center">
					<span class="text-bold">Eingebaut</span>
					<span>Presse { *tool.Press }</span>
				</span>
			</span>
		case models.StatusAvailable:
			<span class="badge badge-sm badge-outline info">
				Verf√ºgbar
			</span>
		case models.StatusRegenerating:
			<span class="badge badge-sm badge-outline warning">
				Regenerierung
			</span>
	}
}

type ToolStatusEditProps struct {
	Tool              *models.Tool
	Editable          bool
	UserHasPermission bool
}

templ ToolStatusEdit(props *ToolStatusEditProps) {
	<div
		id={ fmt.Sprintf("tool-status-%d", props.Tool.ID) }
		class="flex flex-col gap-sm"
	>
		if props.Editable {
			@toolStatusEditForm(props.Tool, props.UserHasPermission)
		} else {
			@toolStatusDisplay(props.Tool)
		}
	</div>
}

templ toolStatusDisplay(tool *models.Tool) {
	<div class="flex items-center gap-sm">
		@ToolStatusBadge(tool)
		<button
			type="button"
			class="small btn-ghost text-muted hover:text-primary transition-colors"
			hx-get={ fmt.Sprintf("%s/htmx/tools/status-edit?id=%d",
				env.ServerPathPrefix, tool.ID) }
			hx-target={ fmt.Sprintf("#tool-status-%d", tool.ID) }
			hx-swap="outerHTML"
			title="Status bearbeiten"
		>
			<i class="bi bi-pencil-square text-sm"></i>
		</button>
	</div>
}

templ toolStatusEditForm(tool *models.Tool, userHasPermission bool) {
	<div class="card p-sm flex flex-col gap-sm">
		<div class="flex items-center gap-sm mb-sm">
			@ToolStatusBadge(tool)
			<span class="text-sm text-muted">Regenerierung steuern</span>
		</div>
		<div class="flex flex-col gap-sm">
			if tool.Status() != models.StatusRegenerating {
				<form
					hx-put={ fmt.Sprintf("%s/htmx/tools/status", env.ServerPathPrefix) }
					hx-target={ fmt.Sprintf("#tool-status-%d", tool.ID) }
					hx-swap="outerHTML"
				>
					<input type="hidden" name="tool_id" value={ fmt.Sprintf("%d", tool.ID) }/>
					<input type="hidden" name="status" value="regenerating"/>
					<button
						type="submit"
						class="small warning w-full m-0 flex gap"
						if !userHasPermission {
							disabled
						}
					>
						<i class="bi bi-arrow-clockwise"></i>
						Regenerierung starten
					</button>
				</form>
			} else {
				<form
					hx-put={ fmt.Sprintf("%s/htmx/tools/status", env.ServerPathPrefix) }
					hx-target={ fmt.Sprintf("#tool-status-%d", tool.ID) }
					hx-swap="outerHTML"
				>
					<input type="hidden" name="tool_id" value={ fmt.Sprintf("%d", tool.ID) }/>
					<input type="hidden" name="status" value="active"/>
					<button
						type="submit"
						class="small success w-full m-0 flex gap"
						if !userHasPermission {
							disabled
						}
					>
						<i class="bi bi-sign-stop"></i>
						Regenerierung stoppen
					</button>
				</form>
				<form
					hx-put={ fmt.Sprintf("%s/htmx/tools/status", env.ServerPathPrefix) }
					hx-target={ fmt.Sprintf("#tool-status-%d", tool.ID) }
					hx-swap="outerHTML"
				>
					<input type="hidden" name="tool_id" value={ fmt.Sprintf("%d", tool.ID) }/>
					<input type="hidden" name="status" value="abort"/>
					<button
						type="submit"
						class="small destructive w-full m-0 flex gap"
						if !userHasPermission {
							disabled
						}
					>
						<i class="bi bi-trash"></i>
						Regenerierung Abbrechen
					</button>
				</form>
			}
			<button
				type="button"
				class="small secondary flex gap"
				hx-get={ fmt.Sprintf("%s/htmx/tools/status-display?id=%d",
					env.ServerPathPrefix, tool.ID) }
				hx-target={ fmt.Sprintf("#tool-status-%d", tool.ID) }
				hx-swap="outerHTML"
			>
				<i class="bi bi-x"></i>
				Abbrechen
			</button>
		</div>
	</div>
}
