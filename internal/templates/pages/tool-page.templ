package pages

import (
	"fmt"
	"github.com/knackwurstking/pgpress/internal/database"
	"github.com/knackwurstking/pgpress/internal/templates/layouts"
)

templ ToolPage(tool *database.ToolWithNotes, metalSheets []*database.MetalSheet) {
	@layouts.Main(
		layouts.MainOptions{
			PageTitle:   fmt.Sprintf("PG Presse | %s", tool.String()),
			AppBarTitle: tool.String(),
			NavContent:  toolsPageNavContent(),
		},
	) {
		<main class="container fluid flex flex-col gap">
			<div class="dev-note card warning mb">
				<div class="card-header">
					<h4>
						<i class="bi bi-exclamation-triangle mr"></i>
						<span>In Bearbeitung</span>
					</h4>
				</div>
			</div>
			@toolPageActions(tool)
			@toolPageNotes(tool)
			if tool.Position == database.PositionTop || tool.Position == database.PositionBottom {
				@toolPageMetalSheets(tool, metalSheets)
			}
			@toolPageCylesList(tool)
		</main>
	}
}

// TODO: ...
// 	- Action bar (top position)
// 	 	- Delete button for tool removal, redirect back to tools/ page after deletion
//  	- Edit button for tool editing
templ toolPageActions(tool *database.ToolWithNotes) {
	<div class="action-bar flex gap justify-end items-center">
		<button class="primary flex gap">
			<i class="bi bi-pencil"></i>
			Bearbeiten
		</button>
		<button class="destructive flex gap">
			<i class="bi bi-trash"></i>
			Löschen
		</button>
	</div>
}

// TODO: ...
// 	- Show all notes in order of importance
templ toolPageNotes(tool *database.ToolWithNotes) {
	if len(tool.LoadedNotes) > 0 {
		<section class="notes-section">
			<h3>Notizen</h3>
			<div class="notes-list">
				for _, note := range tool.LoadedNotes {
					<div class="card">
						<div class="card-header">
							<span class="note-importance">
								switch note.Level {
									case database.INFO:
										<i class="bi bi-info-circle"></i>
										Info
									case database.ATTENTION:
										<i class="bi bi-exclamation-triangle text-warning"></i>
										<strong>Achtung</strong>
									case database.BROKEN:
										<i class="bi bi-x-circle text-danger"></i>
										<strong>Defekt</strong>
								}
							</span>
							<span class="note-date">
								{ note.CreatedAt.Format("2006-01-02 15:04") }
							</span>
						</div>
						<div class="card-body">
							<p>{ note.Content }</p>
						</div>
					</div>
				}
			</div>
		</section>
	}
}

templ toolPageMetalSheets(tool *database.ToolWithNotes, metalSheets []*database.MetalSheet) {
	<section class="metalsheets-section">
		<h3>Bleche</h3>
		<div class="table-container">
			switch tool.Position {
				case database.PositionBottom:
					@toolPageMetalSheetsTablePositionBottom(metalSheets)
				case database.PositionTop:
					@toolPageMetalSheetsTablePositionTop(metalSheets)
			}
		</div>
	</section>
}

templ toolPageMetalSheetsTablePositionBottom(metalSheets []*database.MetalSheet) {
	<figure class="w-full overflow-x-scroll">
		<table class="table borderless compact">
			<thead>
				<tr>
					<th>Stärke (mm)</th>
					<th>Blech (mm)</th>
					<th>Marke (mm)</th>
					<th>Stf.</th>
					<th>Stf. Max</th>
					<th>Aktionen</th>
				</tr>
			</thead>
			<tbody>
				if len(metalSheets) == 0 {
					<tr>
						<td colspan="6" class="text-center">
							Keine Bleche für dieses Werkzeug gefunden
						</td>
					</tr>
				} else {
					for _, sheet := range metalSheets {
						<tr>
							<td>{ fmt.Sprintf("%.1f", sheet.TileHeight) }</td>
							<td>{ fmt.Sprintf("%.1f", sheet.Value) }</td>
							<td>{ fmt.Sprintf("%d", sheet.MarkeHeight) }</td>
							<td>{ fmt.Sprintf("%.1f", sheet.STF) }</td>
							<td>{ fmt.Sprintf("%.1f", sheet.STFMax) }</td>
							<td class="flex gap-sm justify-center items-center">
								<!-- TODO: Action button here: "delete", "modify" -->
								<button class="info icon ghost text-sm">
									<i class="bi bi-eye"></i>
								</button>
								<button class="primary icon ghost text-sm">
									<i class="bi bi-pencil"></i>
								</button>
								<button class="destructive icon ghost text-sm">
									<i class="bi bi-trash"></i>
								</button>
							</td>
						</tr>
					}
				}
			</tbody>
		</table>
	</figure>
}

templ toolPageMetalSheetsTablePositionTop(metalSheets []*database.MetalSheet) {
	<figure class="w-full overflow-x-scroll">
		<table class="table borderless compact">
			<thead>
				<tr>
					<th>Stärke (mm)</th>
					<th>Blech (mm)</th>
					<th>Aktionen</th>
				</tr>
			</thead>
			<tbody>
				if len(metalSheets) == 0 {
					<tr>
						<td colspan="3" class="text-center">
							Keine Bleche für dieses Werkzeug gefunden
						</td>
					</tr>
				} else {
					for _, sheet := range metalSheets {
						<tr>
							<td>{ fmt.Sprintf("%.1f", sheet.TileHeight) }</td>
							<td>{ fmt.Sprintf("%.1f", sheet.Value) }</td>
							<td class="flex gap-sm justify-center items-center">
								<!-- TODO: Action button here: "delete", "modify" -->
								<button class="info icon ghost text-sm">
									<i class="bi bi-eye"></i>
								</button>
								<button class="primary icon ghost text-sm">
									<i class="bi bi-pencil"></i>
								</button>
								<button class="destructive icon ghost text-sm">
									<i class="bi bi-trash"></i>
								</button>
							</td>
						</tr>
					}
				}
			</tbody>
		</table>
	</figure>
}

// TODO: Continue here...
// 	- Show where this tool is currently used, in which press
//  - Also show a history for last used presses, this should all be a part of the cykles table.
// 	- Cycles table for this tool, should be reset after regeneration but keep the data in
// 	  history, so just set a mark with a timestamp of regeneration.
templ toolPageCylesList(tool *database.ToolWithNotes) {
	<section class="cycles-section flex flex-col gap">
		<h3>Werkzeugnutzung & Zyklen</h3>
		<section class="current-usage">
			<h4>Aktueller Status</h4>
			switch tool.Status {
				case database.ToolStatusActive:
					<a
						role="button"
						class="secondary ghost flex gap justify-between w-full"
						href={ fmt.Sprintf(serverPathPrefix+"/tools/active/%d", tool.Press) }
					>
						<span class="flex gap items-center  text-sm">
							<span class="contrast ghost">Presse { fmt.Sprintf("%d", tool.Press) }</span>
							<span class="primary ghost">Aktiv</span>
						</span>
						<i class="bi bi-chevron-right text-muted"></i>
					</a>
				case database.ToolStatusAvailable:
					<span class="info ghost">Verfügbar</span>
				case database.ToolStatusRegenerating:
					<span class="warning ghost">Regenerierung</span>
				default:
					<span>{ string(tool.Status) }</span>
			}
		</section>
		<section class="press-history">
			<h4>Pressennutzungsverlauf</h4>
			<section class="dev-note card warning">
				<div class="card-header">
					<h4>
						<i class="bi bi-exclamation-triangle mr"></i>
						<span>Dev Note</span>
					</h4>
				</div>
				<div class="card-body">
					<p>
						Wenn das Werkzeug regeneriert wird, wird die Tabelle
						unterbrochen und eine neue hinzugefügt (Reihenfolge:
						Neu zu Alt).
					</p>
				</div>
			</section>
			<section>
				<h5 class="mb">
					Gesamtzyklen seit der letzten Regenerierung:
				</h5>
				<span>
					<input value={ fmt.Sprintf("%d", 0) } readonly/>
				</span>
			</section>
			<figure class="w-full overflow-x-scroll">
				<table class="table borderless compact">
					<thead>
						<tr>
							<th name="from">Von</th>
							<th name="to">Bis</th>
							<th name="total">Gesamtzyklen</th>
							<th name="partial">Teilzyklen</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td colspan="4" class="text-center">
								Kein Pressenverlauf verfügbar
							</td>
						</tr>
					</tbody>
				</table>
			</figure>
		</section>
	</section>
}
