// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.924
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/knackwurstking/pgpress/internal/templates/layouts"

func toolsPageAdditionalHead() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<link rel=\"stylesheet\" href=\"./css/trouble-reports/dialog-edit.css\"><link rel=\"stylesheet\" href=\"./css/trouble-reports/data.css\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = troubleReportsPageScript().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func toolsPageNavContent() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div class=\"flex flex-row gap justify-end items-center\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = navFeedButton().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = navProfileButton().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = navHomeButton().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ToolsPage() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var4 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<main class=\"container fluid\"><!-- TODO: List tools (upper and lower tools),\n\t\t\t\t\t   format + ID, link to sub page showing all information\n\t\t\t\t\t   about the tool (/tools/:id) --><!-- NOTE: Just some things i have in mind\n\n\t\t\t\taction buttons\n\t\t\t\t\tadd a new tool\n\t\t\t\t\tadd/edit a new metal sheet entry\n\t\t\t\t\t \tedit dialog, or a sub page\n\t\t\t\t\t\twhile typing, do background checks for existing data and display below\n\n\t\t\t \tlist tools\n\t\t\t\t\tif a tool was clicked\n\t\t\t\t     \taction buttons\n\t\t\t\t\t\t    share to pdf button, only enabled if a tool is selected\n\n\t\t\t\t\t\tselection\n\t\t\t\t\t\t\t<select: Upper Tool ID> <select: Lower Tool ID>\n\t\t\t\t\t\t\t100x100 G01 \t \t\t100x100 G02\n\n\t\t\t\t\t\toutput\n\t\t\t\t\t\t\tShowing notes for upper and lower tools\n\n\t\t\t\t\t\t\tMetal sheets table\n\t\t\t\t\t\t\t\tThickness in mm, with a belonging mass humidity (Optimal: 6%)\n\t\t\t\t\t\t\t\tMarke height in mm\n\t\t\t\t\t\t\t\tStempelfall (\"current\", \"max\"), (types: \"SACMI\", \"SITI\")\n\n\t\t\t\t\t\t\tCalculator based on existing table data (Experimental)\n\n\t\t\t--><div class=\"card warning\"><div class=\"card-header\"><h4><i class=\"bi bi-exclamation-triangle mr\"></i> <span>Work in Progress</span></h4></div><div class=\"card-body\">Just developing an idea here</div></div><!--div class=\"actions\"></div--><!-- Active Tools for press 0-5 --><div class=\"tools\" style=\"display: flex; flex-direction: column; gap: 1.5rem;\"><div class=\"active-tools p\"><h3 class=\"mb\"><i class=\"bi bi-gear-fill mr\"></i> Eingebaute Werkzeuge</h3><ul class=\"flex flex-col gap m-0 p-0\" style=\"list-style: none;\"><!-- Press 0 --><li><a role=\"button\" href=\"#\" class=\"ghost contrast flex justify-between items-center\"><span class=\"flex flex-wrap gap-lg items-center\"><!-- Upper Tool --><span><small style=\"border-radius: var(--ui-radius);\" class=\"primary py-sm px\">Oben</small> <small><strong>100x100 G01</strong></small></span><!-- Separator --><span class=\"muted ghost\">|</span><!-- Lower Tool --><span><small style=\"border-radius: var(--ui-radius);\" class=\"primary py-sm px\">Unten</small> <small><strong>100x100 G01</strong></small></span></span> <i class=\"bi bi-chevron-right\"></i></a></li></ul></div><!-- All Tools --><div class=\"all-tools p\"><h3 class=\"mb\"><i class=\"bi bi-archive mr\"></i> Alle Werkzeuge</h3><ul class=\"flex flex-col gap m-0 p-0\" style=\"list-style: none;\"><!-- Tools ordered from biggest to smallest --><!-- TODO: For theese items here i need an icon which marks a tool is gone\n\t\t\t\t\t\tfor regeneration, another icon for broken and an icon for attention --><li><a role=\"button\" href=\"#\" class=\"ghost contrast flex justify-between items-center py px-lg\"><span>150x75 XXL01</span> <i class=\"bi bi-chevron-right\"></i></a></li><li><a role=\"button\" href=\"#\" class=\"ghost contrast flex justify-between items-center py px-lg\"><span>100x100 G01</span> <i class=\"bi bi-chevron-right\"></i></a></li><li><a role=\"button\" href=\"#\" class=\"ghost contrast flex justify-between items-center py px-lg\"><span>100x100 G02</span> <i class=\"bi bi-chevron-right\"></i></a></li></ul></div></div></main>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = layouts.Main(
			layouts.MainOptions{
				PageTitle:      "PG Presse | Werkzeuge",
				AppBarTitle:    "Werkzeuge",
				AdditionalHead: toolsPageAdditionalHead(),
				NavContent:     toolsPageNavContent(),
			},
		).Render(templ.WithChildren(ctx, templ_7745c5c3_Var4), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
