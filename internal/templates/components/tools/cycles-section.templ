package tools

import (
	"fmt"
	"github.com/knackwurstking/pgpress/internal/constants"
	"github.com/knackwurstking/pgpress/internal/database"
	"time"
)

type CyclesSectionProps struct {
	User          *database.User
	ToolID        int64
	TotalCycles   int64
	Cycles        []*database.PressCycle
	Regenerations []*database.ToolRegeneration
}

templ CyclesSection(props *CyclesSectionProps) {
	<div class="flex justify-between items-center mb">
		<h5>Pressennutzungsverlauf</h5>
		<!-- TODO: This feature is not yet implemented -->
		<button
			hx-get={ fmt.Sprintf(
						"%s/htmx/tools/cycle/edit?tool_id=%d",
						constants.ServerPathPrefix, props.ToolID,
					) }
			hx-trigger="click"
			hx-target={ fmt.Sprintf("#%s", constants.IDToolCycleEditDialog) }
			hx-swap="outerHTML"
			class="secondary small flex"
			title="Neuen Eintrag hinzufügen"
		>
			<i class="bi bi-plus-lg"></i>
		</button>
	</div>
	<section>
		<h6 class="mb">
			Gesamtzyklen seit der letzten Regenerierung:
		</h6>
		<span>
			@totalCycles(props.TotalCycles)
		</span>
	</section>
	<figure class="w-full overflow-x-scroll">
		<table name="tool-cycles-table" class="table borderless compact">
			<thead>
				<tr>
					<th name="press">Presse</th>
					<th name="from">Von</th>
					<th name="total">Gesamtzyklen</th>
					<th name="partial">Teilzyklen (berechnet)</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@cyclesTableRows(props.User, props.Cycles, props.Regenerations)
			</tbody>
		</table>
	</figure>
	<span id={ constants.IDToolCycleEditDialog }></span>
}

// totalCycles renders an input field displaying the total cycles since last regeneration
templ totalCycles(totalCycles int64) {
	<input
		type="number"
		value={ fmt.Sprintf("%d", totalCycles) }
		readonly
		class="total-cycles-display"
		title="Gesamtzyklen seit der letzten Regenerierung"
	/>
}

// cyclesTableRows renders the tbody content for tool cycles history
//
// TODO: I really need to clean up this someday
templ cyclesTableRows(user *database.User, cycles []*database.PressCycle, regenerations []*database.ToolRegeneration) {
	if len(cycles) == 0 && len(regenerations) == 0 {
		<tr>
			<td colspan="5" class="text-center">
				Kein Pressenverlauf verfügbar
			</td>
		</tr>
	} else {
		// Group cycles by regeneration periods
		// Show most recent regeneration period first
		for i := len(regenerations) - 1; i >= 0; i-- {
			@renderRegenerationMarker(regenerations[i])
			@renderCyclesForPeriod(user, cycles, regenerations, i)
		}
		// Show cycles before first regeneration (if any)
		if len(regenerations) > 0 {
			@renderCyclesBeforeFirstRegeneration(user, cycles, regenerations[0])
		} else {
			// No regenerations, show all cycles
			for _, cycle := range cycles {
				// No regenerations, so partial cycles equal total cycles
				@renderCycleRowWithPartialCalc(user, cycle, 0)
			}
		}
	}
}

templ renderRegenerationMarker(regeneration *database.ToolRegeneration) {
	<tr class="regeneration-marker">
		<td colspan="5" class="text-center">
			<div class="flex gap items-center justify-center">
				<i class="bi bi-arrow-repeat text-warning"></i>
				<span class="text-muted">
					Regenerierung am { regeneration.RegeneratedAt.Format("02.01.2006 15:04") }
				</span>
			</div>
		</td>
	</tr>
}

templ renderCyclesForPeriod(user *database.User, cycles []*database.PressCycle, regenerations []*database.ToolRegeneration, regenerationIndex int) {
	// Determine the time window for this regeneration period
	// Partial cycles are calculated as: total_cycles - cycles_at_regeneration
	if regenerationIndex < len(regenerations)-1 {
		// Period between two regenerations
		@renderCyclesInWindow(user, cycles, &regenerations[regenerationIndex].RegeneratedAt, &regenerations[regenerationIndex+1].RegeneratedAt, regenerations[regenerationIndex].CyclesAtRegeneration)
	} else {
		// Period after the last regeneration
		@renderCyclesInWindow(user, cycles, &regenerations[regenerationIndex].RegeneratedAt, nil, regenerations[regenerationIndex].CyclesAtRegeneration)
	}
}

templ renderCyclesInWindow(user *database.User, cycles []*database.PressCycle, startTime *time.Time, endTime *time.Time, cyclesAtRegeneration int64) {
	{{ hasCycles := false }}
	for _, cycle := range cycles {
		if cycleInPeriod(cycle, startTime, endTime) {
			{{ hasCycles = true }}
			@renderCycleRowWithPartialCalc(user, cycle, cyclesAtRegeneration)
		}
	}
	if !hasCycles {
		<tr>
			<td colspan="5" class="text-center text-muted">
				Keine Zyklen in diesem Zeitraum
			</td>
		</tr>
	}
}

templ renderCyclesBeforeFirstRegeneration(user *database.User, cycles []*database.PressCycle, firstRegeneration *database.ToolRegeneration) {
	{{ hasCycles := false }}
	for _, cycle := range cycles {
		if cycle.FromDate.Before(firstRegeneration.RegeneratedAt) {
			{{ hasCycles = true }}
			@renderCycleRowWithPartialCalc(user, cycle, 0)
		}
	}
	if hasCycles {
		<tr class="regeneration-marker">
			<td colspan="5" class="text-center">
				<span class="text-muted">Zyklen vor erster Regenerierung</span>
			</td>
		</tr>
	}
}

// renderCycleRowWithPartialCalc renders a cycle row with dynamically calculated partial cycles
// Partial cycles = total_cycles - cycles_at_regeneration
templ renderCycleRowWithPartialCalc(user *database.User, cycle *database.PressCycle, cyclesAtRegeneration int64) {
	{{ partialCycles := cycle.TotalCycles - cyclesAtRegeneration }}
	<tr>
		<td>
			<span>{ fmt.Sprintf("%d", cycle.PressNumber) }</span>
		</td>
		<td>
			<div class="flex flex-col">
				<span>{ cycle.FromDate.Format("02.01.2006") }</span>
				<span class="text-muted text-sm">{ cycle.FromDate.Format("15:04") }</span>
			</div>
		</td>
		<td>
			{ fmt.Sprintf("%d", cycle.TotalCycles) }
		</td>
		<td>
			<span title="Berechnet: Gesamtzyklen - Zyklen bei Regenerierung">
				{ fmt.Sprintf("%d", partialCycles) }
			</span>
		</td>
		<td class="button-group flex justify-end items-center">
			<!-- TODO: This feature is not yet implemented -->
			<button
				hx-get={ fmt.Sprintf(
					"%s/htmx/tools/cycle/edit?cycle_id=%d",
					constants.ServerPathPrefix, cycle.ID,
				) }
				hx-trigger="click"
				class="small ghost"
				title="Bearbeiten"
			>
				<i class="bi bi-pencil"></i>
			</button>
			<!-- TODO: This feature is not yet implemented -->
			<button
				hx-delete={ fmt.Sprintf(
					"%s/htmx/tools/cycle/delete?cycle_id=%d",
					constants.ServerPathPrefix, cycle.ID,
				) }
				hx-trigger="click"
				class="destructive small ghost"
				title="Löschen"
				if !user.IsAdmin() {
					disabled
				}
			>
				<i class="bi bi-trash"></i>
			</button>
		</td>
	</tr>
}

// Helper function to check if a cycle is within a time period
func cycleInPeriod(cycle *database.PressCycle, startTime, endTime *time.Time) bool {
	if startTime != nil && cycle.FromDate.Before(*startTime) {
		return false
	}
	if endTime != nil && cycle.FromDate.After(*endTime) {
		return false
	}
	return true
}
