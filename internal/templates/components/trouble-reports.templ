package components

import (
	"fmt"
	"github.com/knackwurstking/pgpress/internal/constants"
	"github.com/knackwurstking/pgpress/internal/database"
)

script troubleReportsListScript() {
	if (location.hash === "") {
		return;
	}

	var details = document.querySelector(location.hash);
	console.debug(location.hash, details)
	if (details) {
		details.open = true;
		setTimeout(() =>
    					details.scrollIntoView({ behavior: 'smooth', block: 'start' }),
		100);
	}
}

script shareTroubleReportPDF(event templ.JSExpression, troubleReportId int64, title string) {
    var button = event.target.closest("button");
    if (!button) {
        alert("Fehler: Share-Button nicht gefunden.");
        return;
    }

    var originalContent = button.innerHTML;
    button.innerHTML = '<i class="bi bi-hourglass-split"></i>';
    button.disabled = true;

    function resetButton() {
        button.innerHTML = originalContent;
        button.style.color = "blue";
        button.disabled = false;
    }

    function showSuccess(icon) {
        button.innerHTML = icon;
        button.style.color = "green";
        setTimeout(resetButton, 1500);
    }

    function downloadPDF(blob) {
        var filename = `fehlerbericht_${troubleReportId}_${new Date().toISOString().split("T")[0]}.pdf`;
        var url = URL.createObjectURL(blob);
        var a = document.createElement("a");
        a.href = url;
        a.download = filename;
        a.style.display = "none";
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        showSuccess('<i class="bi bi-download"></i>');
    }

    // FIXME: I need to use the serverPathPrefix variable to construct the URL
    fetch(`./trouble-reports/share-pdf?id=${troubleReportId}`)
        .then(response => {
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return response.blob();
        })
        .then(blob => {
            var filename = `fehlerbericht_${troubleReportId}_${new Date().toISOString().split("T")[0]}.pdf`;
            var isHTTPS = location.protocol === "https:";

            if (isHTTPS && navigator.share && navigator.canShare) {
                var file = new File([blob], filename, { type: "application/pdf" });
                var shareData = {
                    title: `Fehlerbericht: ${title}`,
                    text: `Fehlerbericht #${troubleReportId}`,
                    files: [file]
                };

                if (navigator.canShare(shareData)) {
                    return navigator.share(shareData)
                        .then(() => showSuccess('<i class="bi bi-check-circle"></i>'))
                        .catch(() => downloadPDF(blob));
                }
            }
            downloadPDF(blob);
        })
        .catch(error => {
            console.error("Error sharing/downloading PDF:", error);
            alert("Fehler beim Erstellen oder Teilen der PDF. Bitte versuchen Sie es erneut.");
            resetButton();
        });
}

templ TroubleReportsList(user *database.User, troubleReports []*database.TroubleReportWithAttachments) {
	if len(troubleReports) > 0 {
		<ul id={ constants.IDData }>
			for _, tr := range troubleReports {
				<span class="trouble-report">
					<details
						id={ fmt.Sprintf(constants.IDTroubleReportPrefix, tr.ID) }
					>
						<summary>{ tr.Title }</summary>
						<pre>{ tr.Content }</pre>
						<!-- Attachments Preview Container -->
						if len(tr.LoadedAttachments) > 0 {
							<br/>
							<div
								class="attachments-preview-placeholder"
								data-trouble-report-id={ fmt.Sprintf("%d", tr.ID) }
								hx-get={ fmt.Sprintf(
									"%s/htmx/trouble-reports/attachments-preview?id=%d", serverPathPrefix, tr.ID,
								) }
								hx-trigger="click"
								hx-swap="outerHTML"
							>
								<div class="attachments-preview-label">
									<i class="bi bi-paperclip"></i>
									Anhänge ({ len(tr.LoadedAttachments) }) - Klicken Sie hier, um zu laden...
								</div>
							</div>
						}
					</details>
					<div class="actions flex gap justify-end items-center">
						<button
							hx-get={ fmt.Sprintf(
								"%s/htmx/trouble-reports/modifications/%d",
								serverPathPrefix, tr.ID,
							) }
							hx-trigger="click"
							hx-target={ fmt.Sprintf("#%s", constants.IDData) }
							hx-swap="outerHTML"
							class="ghost secondary icon"
						>
							<i class="bi bi-clock-history"></i>
						</button>
						<button
							hx-get={ fmt.Sprintf(
								"%s/htmx/trouble-reports/dialog-edit?id=%d", serverPathPrefix, tr.ID) }
							hx-trigger="click"
							hx-target={ fmt.Sprintf("#%s", constants.IDTroubleReportEditDialog) }
							hx-swap="outerHTML"
							class="ghost icon"
						>
							<i class="bi bi-pen"></i>
						</button>
						<button
							id={ fmt.Sprintf("share-btn-%d", tr.ID) }
							onclick={ shareTroubleReportPDF(templ.JSExpression("event"), tr.ID, tr.Title) }
							class="ghost icon info"
							title="Als PDF teilen"
						>
							<i class="bi bi-share"></i>
						</button>
						if user.IsAdmin() {
							<button
								hx-delete={ fmt.Sprintf("%s/htmx/trouble-reports/data?id=%d", serverPathPrefix, tr.ID) }
								hx-trigger="click"
								hx-target={ fmt.Sprintf("#%s", constants.IDData) }
								hx-swap="outerHTML"
								hx-confirm="Sind Sie sicher, dass Sie diesen Fehlerbericht löschen möchten?"
								class="ghost destructive icon"
							>
								<i class="bi bi-trash"></i>
							</button>
						} else {
							<!-- TODO: Benutzer ist kein Administrator, Abstimmungssystem zum Löschen von Problemberichten hinzufügen, noch nicht implementiert -->
							<button
								id={ constants.IDVoteForDelete }
								hx-post={ fmt.Sprintf("%s/htmx/trouble-reports/vote?id=%d&mode=delete", serverPathPrefix, tr.ID) }
								hx-trigger="click"
								hx-swap="outerHTML"
								class="ghost destructive flex flex-col justify-between items-center"
								disabled
							>
								<i class="bi bi-trash"></i>
								<small>ABSTIMMEN</small>
							</button>
						}
					</div>
					<hr/>
				</span>
			}
			@troubleReportsListScript()
		</ul>
	} else {
		<span id={ constants.IDData }></span>
	}
}
